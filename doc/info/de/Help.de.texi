@c -----------------------------------------------------------------------------
@c File        : Help.de.texi
@c License     : GNU General Public License (GPL)
@c Language    : German
@c Original    : Help.texi revision 1.28
@c Translation : Dr. Dieter Kaiser
@c Date        : 15.10.2010
@c Revision    : 08.03.2011
@c 
@c This file is part of Maxima -- GPL CAS based on DOE-MACSYMA
@c -----------------------------------------------------------------------------

@menu
* Dokumentation::               
* Funktionen und Variablen der Hilfe::
@end menu

@c -----------------------------------------------------------------------------
@node Dokumentation, Funktionen und Variablen der Hilfe, Hilfe, Hilfe
@section Dokumentation
@c -----------------------------------------------------------------------------

Die Maxima-Dokumentation ist in Texinfo geschrieben und wird in verschiedenen 
Formaten zur Verf@"ugung gestellt.  Von der Maxima-Kommandozeile kann die
Dokumentation mit den Kommandos @mrefcomma{?} @mref{??} oder
@mref{describe} aufgerufen werden.  Weiterhin kann die Dokumentation als GNU
Infotext mit dem GNU Programm @code{info}, in einem Browser oder als PDF-Datei
gelesen werden.  Sowohl unter Windows als auch unter Linux kann die
Dokumentation als Hilfedatei gelesen werden.

@c -----------------------------------------------------------------------------
@node Funktionen und Variablen der Hilfe,  , Dokumentation, Hilfe
@section Funktionen und Variablen der Hilfe
@c -----------------------------------------------------------------------------

@c --- 14.02.2011 DK -----------------------------------------------------------
@anchor{apropos}
@deffn {Funktion} apropos (@var{string})

Gibt eine Liste der Maxima-Symbole zur@"uck, die die Zeichenkette @var{string}
im Namen enthalten.  Das Kommando @code{apropos("")} gibt eine Liste mit allen
Maxima-Symbolen zur@"uck.  Wenn @code{apropos} kein Maxima-Symbol finden kann,
das die Zeichenkette @var{string} im Namen enth@"alt, ist das Ergebnis eine
leere Liste @code{[]}.

Beispiel:

Zeige alle Maxima-Symbole, die die Zeichenkette @code{"gamma"} im Namen
enthalten:

@example
(%i1) apropos("gamma");
(%o1) [%gamma, gamma, gammalim, gamma_expand, gamma_incomplete_lower, 
gamma_incomplete, gamma_incomplete_generalized, 
gamma_incomplete_regularized, Gamma, log_gamma, makegamma, 
prefer_gamma_incomplete, 
gamma_incomplete_generalized_regularized]
@end example
@end deffn

@c --- 14.02.2011 DK -----------------------------------------------------------
@anchor{demo}
@deffn {Funktion} demo (@var{filename})

F@"uhrt die Beispiele der Demo-Datei @var{filename} aus.  Das Argument
@var{filename} kann ein Symbol oder eine Zeichenkette sein.  @code{demo} macht
nach jeder Ausgabe eine Pause und wartet auf eine Eingabe.  @code{demo} sucht in
den Ordnern, die in der Optionsvariablen @mref{file_search_demo} enthalten sind,
nach der Datei @var{filename}.  Die Dateiendung @var{.dem} muss nicht angegeben
werden.

Siehe auch die Funktion @mref{file_search} f@"ur die Suche von Dateien und die
Funktion @mref{batch} f@"ur den Aufbau einer Demo-Datei.  Demo-Dateien k@"onnen
auch von der Funktion @code{batch} mit der Option @code{demo} ausgef@"uhrt
werden.  @code{demo} wertet das Argument aus.  @code{demo} gibt den Namen der
Demo-Datei zur@"uck, die ausgef@"uhrt wird.

Beispiel:

@example
(%i1) demo ("disol");
batching /home/wfs/maxima/share/simplification/disol.dem
 At the _ prompt, type ';' followed by enter to get next demo
(%i2)                      load(disol)
_
(%i3)           exp1 : a (e (g + f) + b (d + c))
(%o3)               a (e (g + f) + b (d + c))
_
(%i4)                disolate(exp1, a, b, e)
(%t4)                         d + c

(%t5)                         g + f

(%o5)                   a (%t5 e + %t4 b)
_
@end example
@end deffn

@c --- 14.02.2011 DK -----------------------------------------------------------
@anchor{describe}
@deffn  {Funktion} describe (@var{topic})
@deffnx {Funktion} describe (@var{topic}, exact)
@deffnx {Funktion} describe (@var{topic}, inexact)
@ifinfo
@fnindex Hilfe
@end ifinfo

@code{describe(@var{topic})} entspricht dem Kommando @code{describe(@var{topic},
exact)}.  Das Argument @var{topic} ist eine Zeichenkette oder ein Symbol.  Wenn
@var{topic} ein Operator wie zum Beispiel @code{+}, @code{*}, @code{do} oder
@code{if} ist, muss der Name des Operators als eine Zeichenkette angegeben
werden.  Der Name des Operators @code{+} f@"ur die Addition ist zum Beispiel
@code{"+"}.

@code{describe(@var{topic}, exact)} findet Eintr@"age, die mit @var{topic} 
@"ubereinstimmen.  Bei der Suche nach einer @"Ubereinstimmung werden Klein- und
Gro@ss{}schreibung nicht voneinander unterschieden.
@code{describe(@var{topic}, inexact)} findet Eintr@"age, die @var{topic}
enthalten.  Sind mehrere Eintr@"age vorhanden, fragt Maxima, welcher der 
Eintr@"age angezeigt werden soll.

@code{? foo} (mit einem Leerzeichen zwischen @code{?} und @code{foo}) entspricht
@code{describe("foo", exact)} und @code{?? foo} entspricht 
@code{describe("foo", inexact)}.  In der Kurzschreibweise muss das Argument ein
Symbol sein.  Siehe auch @mref{?} und @mrefdot{??}

@code{describe("", inexact)} gibt alle Themen aus, die in der Dokumentation
enthalten sind.

@code{describe} wertet das Argument nicht aus.  @code{describe} gibt @code{true} 
zur@"uck, wenn Eintr@"age gefunden wurden, ansonsten @code{false}.

Beispiel:

Im folgenden Beispiel werden die Eintr@"age 2 und 3 ausgew@"ahlt (Die Ausgabe 
ist verk@"urzt wiedergeben).  Alle oder keiner der Eintr@"age werden mit 
@code{all} oder @code{none} ausgew@"ahlt.  Die Eingabe kann mit @code{a} oder 
@code{n} abgek@"urzt werden.

@example
(%i1) ?? integrat
 0: Functions and Variables for Integration
 1: Introduction to Integration
 2: integrate (Functions and Variables for Integration)
 3: integrate_use_rootsof (Functions and Variables for Integration)
 4: integration_constant (Functions and Variables for Integration)
 5: integration_constant_counter (Functions and Variables for 
    Integration)
Enter space-separated numbers, `all' or `none': 2 3

 -- Function: integrate (<expr>, <x>)
 -- Function: integrate (<expr>, <x>, <a>, <b>)
     Attempts to symbolically compute the integral of <expr> with
     respect to <x>.  `integrate (<expr>, <x>)' is an indefinite
     integral, while `integrate (<expr>, <x>, <a>, <b>)' is a 
     definite integral, with limits of integration <a> and <b>.
     [...]

 -- Option variable: integrate_use_rootsof
     Default value: `false'

     When `integrate_use_rootsof' is `true' and the denominator of
     a rational function cannot be factored, `integrate' returns
     the integral in a form which is a sum over the roots (not yet 
     known) of the denominator.
     [...]
@end example
@end deffn

@c --- 14.02.2011 DK -----------------------------------------------------------
@anchor{example}
@deffn  {Funktion} example (@var{topic})
@deffnx {Funktion} example ()

Das Kommando @code{example(@var{topic})} zeigt Beispiele f@"ur das Argument
@var{topic}.  @var{topic} ist ein Symbol oder eine Zeichenkette.  Ist das
Argument ein Operator, wie zum Beispiel @code{+}, @code{*} oder @code{do}, muss
das Argument @var{topic} eine Zeichenkette sein.  Der Name des Operators
@code{+} f@"ur die Addition ist zum Beispiel @code{"+"}.  Gro@ss{}- und
Kleinschreibung werden nicht unterschieden.

@code{example()} zeigt eine Liste aller Themen, f@"ur die Beispiele 
vorhanden sind.

Die Optionsvariable @mref{manual_demo} enth@"alt den Namen der Datei, die die 
Beispiele enth@"alt.  Der Standardwert ist @code{"manual.demo"}.

@code{example} wertet das Argument nicht aus.  @code{example} gibt @code{done}
zur@"uck, au@ss{}er wenn kein Argument angeben ist oder wenn kein Beispiel 
gefunden wurde.  In diesen F@"allen wird eine Liste mit allen Themen ausgegeben, 
zu denen Beispiele vorhanden sind.

Beispiele:

@c ===beg===
@c example(append);
@c example("lambda");
@c ===end===
@example
(%i1) example(append);
(%i2) append([x+y,0,-3.2],[2.5e+20,x])
(%o2)             [y + x, 0, - 3.2, 2.5e+20, x]
(%o2)                         done
(%i3) example("lambda");

(%i4) lambda([x,y,z],z^2+y^2+x^2)
                                    2    2    2
(%o4)            lambda([x, y, z], z  + y  + x )
(%i5) %(1,2,a)
                              2
(%o5)                        a  + 5
(%i6) a+2+1
(%o6)                         a + 3
(%o6)                         done
@end example
@end deffn

@c --- 15.10.2010 DK -----------------------------------------------------------
@anchor{manual_demo}
@defvr {Optionsvariable} manual_demo
Standardwert: @code{"manual.demo"}

Die Optionsvariable @code{manual_demo} enth@"alt den Namen der Datei, die die 
Beispiele f@"ur die Funktion @code{example} enth@"alt.  Siehe @mrefdot{example}
@end defvr

@c --- End of file Help.de.texi ------------------------------------------------

