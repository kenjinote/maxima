@c English version 2011-06-12
@page
@node Constantes, Listas, Cadenas de texto, Tipos de datos y estructuras
@section Constantes

@menu
* Funciones y variables para Constantes::   
@end menu

@node Funciones y variables para Constantes,  , Constantes, Constantes
@subsection Funciones y variables para Constantes

@defvr {Constante} %e
@ifinfo
@vrindex e
@vrindex Número de Euler
@vrindex Base de los logaritmos naturales
@end ifinfo
El símbolo @code{%e} representa a la base de los logaritmos
naturales, también conocido como número de Euler. El valor numérico
de @code{%e} es el número decimal en coma flotante 2.718281828459045d0.

@end defvr


@defvr {Constante} %i
@ifinfo
@vrindex i
@vrindex Unidad imaginaria
@end ifinfo
El símbolo @code{%i} representa la unidad imaginaria, @math{sqrt(- 1)}.

@end defvr


@defvr {Constante} false
El símbolo @code{false} representa al valor lógico
"falso". Maxima implementa @code{false} con el valor @code{NIL} de
Lisp.
@end defvr



@defvr {Constante} %gamma
@ifinfo
@vrindex Constante de Euler-Mascheroni
@end ifinfo
Es la constante de Euler-Mascheroni, 0.5772156649015329 ....

@end defvr



@defvr {Constante} ind
@ifinfo
@vrindex Indeterminado
@end ifinfo

@code{ind} representa un resultado acotado indeterminado.

Véase también @code{limit}.

Ejemplo:

@c ===beg===
@c limit (sin(1/x), x, 0);
@c ===end===
@example
(%i1) limit (sin(1/x), x, 0);
(%o1)                          ind
@end example
@end defvr

@defvr {Constante} inf
@ifinfo
@vrindex Más infinito
@end ifinfo
El símbolo @code{inf} representa al infinito real positivo.
@end defvr

@defvr {Constante}  infinity
@ifinfo
@vrindex Infinito complejo
@end ifinfo
El símbolo @code{infinity} representa al infinito complejo.
@end defvr

@defvr {Constante} minf
@ifinfo
@vrindex Menos infinito
@vrindex Infinito negativo
@end ifinfo
El símbolo @code{minf} representa al infinito real negativo.
@end defvr

@defvr {Constante} %phi
@ifinfo
@vrindex phi
@vrindex Razón áurea
@end ifinfo

El símbolo @code{%phi} representa a la llamada @i{razón áurea},
@math{(1 + sqrt(5))/2}.
El valor numérico de @code{%phi} es el número decimal en coma flotante 1.618033988749895d0.

La función @code{fibtophi} expresa los números de Fibonacci @code{fib(n)} en
términos de @code{%phi}.

Por defecto, Maxima desconoce las propiedades algebraicas de @code{%phi}.
Tras evaluar @code{tellrat(%phi^2 - %phi - 1)} y @code{algebraic: true},
@code{ratsimp} puede simplificar algunas expresiones que contengan @code{%phi}.

Ejemplos:

@code{fibtophi} expresa el número de Fibonacci @code{fib(n)} en términos de @code{%phi}.

@c ===beg===
@c fibtophi (fib (n));
@c fib (n-1) + fib (n) - fib (n+1);
@c fibtophi (%);
@c ratsimp (%);
@c ===end===
@example
(%i1) fibtophi (fib (n));
                           n             n
                       %phi  - (1 - %phi)
(%o1)                  -------------------
                           2 %phi - 1
(%i2) fib (n-1) + fib (n) - fib (n+1);
(%o2)          - fib(n + 1) + fib(n) + fib(n - 1)
(%i3) fibtophi (%);
            n + 1             n + 1       n             n
        %phi      - (1 - %phi)        %phi  - (1 - %phi)
(%o3) - --------------------------- + -------------------
                2 %phi - 1                2 %phi - 1
                                          n - 1             n - 1
                                      %phi      - (1 - %phi)
                                    + ---------------------------
                                              2 %phi - 1
(%i4) ratsimp (%);
(%o4)                           0
@end example

Por defecto, Maxima desconoce las propiedades algebraicas de @code{%phi}.
Después de evaluar @code{tellrat (%phi^2 - %phi - 1)} y
@code{algebraic: true}, @code{ratsimp} puede simplificar algunas expresiones
que contengan @code{%phi}.


@c ===beg===
@c e : expand ((%phi^2 - %phi - 1) * (A + 1));
@c ratsimp (e);
@c tellrat (%phi^2 - %phi - 1);
@c algebraic : true;
@c ratsimp (e);
@c ===end===
@example
(%i1) e : expand ((%phi^2 - %phi - 1) * (A + 1));
                 2                      2
(%o1)        %phi  A - %phi A - A + %phi  - %phi - 1
(%i2) ratsimp (e);
                  2                     2
(%o2)        (%phi  - %phi - 1) A + %phi  - %phi - 1
(%i3) tellrat (%phi^2 - %phi - 1);
                            2
(%o3)                  [%phi  - %phi - 1]
(%i4) algebraic : true;
(%o4)                         true
(%i5) ratsimp (e);
(%o5)                           0
@end example

@end defvr


@defvr {Constante} %pi
@ifinfo
@vrindex pi
@end ifinfo
El símbolo @code{%pi} representa la razón entre la longitud de
una circunferencia y su radio. 
El valor numérico de @code{%pi} es el número decimal en coma flotante 3.141592653589793d0.
@end defvr

@defvr {Constante} true
El símbolo @code{true} representa al valor lógico
"verdadero". Maxima implementa @code{true} con el valor @code{T} de
Lisp.
@end defvr

@defvr {Constante} und
@ifinfo
@vrindex Indefinido
@end ifinfo

@code{und} representa un resultado indefinido.

Véase también @code{limit}.

Ejemplo:

@c ===beg===
@c limit (x*sin(x), x, inf);
@c ===end===
@example
(%i1) limit (x*sin(x), x, inf);
(%o1)                          und
@end example

@end defvr

@defvr {Constante} zeroa
@code{zeroa} representa un infinitesimal mayor que cero. 
@code{zeroa} puede utilizarse en expresiones. @code{limit}
simplifica expresiones que contienen infinitesimales.

Véanse también @code{zerob} y @code{limit}.

Ejemplo:

@code{limit} simplifica expresiones que contienen infinitesimales:

@c ===beg===
@c limit(zeroa);
@c limit(zeroa+x);
@c ===end===
@example
(%i1) limit(zeroa);
(%o1)                                  0
(%i2) limit(x+zeroa);
(%o2)                                  x
@end example

@end defvr

@defvr {Constante} zerob
@code{zerob} representa un infinitesimal menor que cero. 
@code{zerob} puede utilizarse en expresiones. @code{limit}
simplifica expresiones que contienen infinitesimales.

Véanse también @code{zeroa} y @code{limit}.
@end defvr


