@c English version 2012-08-23
@menu
* Introducción a distrib::
* Funciones y variables para distribuciones continuas::
* Funciones y variables para distribuciones discretas::
@end menu

@node Introducción a distrib, Funciones y variables para distribuciones continuas, distrib, distrib
@section Introducción a distrib


El paquete @code{distrib} contiene un conjunto de funciones para la realización de cálculos probabilísticos con modelos univariantes, tanto discretos como continuos. 

A continuación un breve recordatorio de las deficiones básicas sobre distribuciones de probabilidad.

Sea @math{f(x)} la @var{función de densidad} de una variable aleatoria @math{X} absolutamente continua. La @var{función de distribución} se define como
@ifnottex
@example
                       x
                      /
                      [
               F(x) = I     f(u) du
                      ]
                      /
                       minf
@end example
@end ifnottex
@tex
$$F\left(x\right)=\int_{ -\infty }^{x}{f\left(u\right)\;du}$$
@end tex
que es igual a la probabilidad @var{Pr(X <= x)}.

La @var{media} es un parámetro de localización y se define como
@ifnottex
@example
                     inf
                    /
                    [
           E[X]  =  I   x f(x) dx
                    ]
                    /
                     minf
@end example
@end ifnottex
@tex
$$E\left[X\right]=\int_{ -\infty }^{\infty }{x\,f\left(x\right)\;dx}$$
@end tex

La  @var{varianza} es una medida de dispersión,
@ifnottex
@example
                 inf
                /
                [                    2
         V[X] = I     f(x) (x - E[X])  dx
                ]
                /
                 minf
@end example
@end ifnottex
@tex
$$V\left[X\right]=\int_{ -\infty }^{\infty }{f\left(x\right)\,\left(x
 -E\left[X\right]\right)^2\;dx}$$
@end tex
que es un número real positivo. La raíz cuadrada de la varianza es la @var{desviación típica}, @math{D[X]=sqrt(V[X])}, siendo otra medida de dispersión.

El @var{coeficiente de asimetría} es una medida de forma,
@ifnottex
@example
                 inf
                /
            1   [                    3
  SK[X] = ----- I     f(x) (x - E[X])  dx
              3 ]
          D[X]  /
                 minf
@end example
@end ifnottex
@tex
$$SK\left[X\right]={{\int_{ -\infty }^{\infty }{f\left(x\right)\,
 \left(x-E\left[X\right]\right)^3\;dx}}\over{D\left[X\right]^3}}$$
@end tex

Y el @var{coeficiente de curtosis} mide el apuntamiento de la densidad,
@ifnottex
@example
                 inf
                /
            1   [                    4
  KU[X] = ----- I     f(x) (x - E[X])  dx - 3
              4 ]
          D[X]  /
                 minf
@end example
@end ifnottex
@tex
$$KU\left[X\right]={{\int_{ -\infty }^{\infty }{f\left(x\right)\,
 \left(x-E\left[X\right]\right)^4\;dx}}\over{D\left[X\right]^4}}-3$$
@end tex
Si @math{X} es normal, @math{KU[X]=0}. De hecho, tanto la asimetría como la curtosis son parámetros de forma para medir la no normalidad de una distribución.

Si la variable aleatoria @math{X} es discreta, su función de densidad, o de @var{probabiliad},  @math{f(x)} toma valores positivos dentro de un conjunto numerable de valores @math{x_i}, y cero en cualquier otro lugar. En este caso, la función de distribución es
@ifnottex
@example
                       ====
                       \
                F(x) =  >    f(x )
                       /        i
                       ====
                      x <= x
                       i
@end example
@end ifnottex
@tex
$$F\left(x\right)=\sum_{x_{i}\leq x}{f\left(x_{i}\right)}$$
@end tex

La media, varianza, desviación típica y los coeficientes de asimetría y curtosis adquieren las formas
@ifnottex
@example
                       ====
                       \
                E[X] =  >  x  f(x ) ,
                       /    i    i
                       ====
                        x 
                         i
@end example
@end ifnottex
@tex
$$E\left[X\right]=\sum_{x_{i}}{x_{i}f\left(x_{i}\right)},$$
@end tex

@ifnottex
@example
                ====
                \                     2
        V[X] =   >    f(x ) (x - E[X])  ,
                /        i    i
                ====
                 x
                  i
@end example
@end ifnottex
@tex
$$V\left[X\right]=\sum_{x_{i}}{f\left(x_{i}\right)\left(x_{i}-E\left[X\right]\right)^2},$$
@end tex

@ifnottex
@example
               D[X] = sqrt(V[X]),
@end example
@end ifnottex
@tex
$$D\left[X\right]=\sqrt{V\left[X\right]},$$
@end tex

@ifnottex
@example
                     ====
              1      \                     3
  SK[X] =  -------    >    f(x ) (x - E[X])  
           D[X]^3    /        i    i
                     ====
                      x
                       i
@end example
@end ifnottex
@tex
$$SK\left[X\right]={{\sum_{x_{i}}{f\left(x\right)\,
 \left(x-E\left[X\right]\right)^3\;dx}}\over{D\left[X\right]^3}}$$
@end tex
y
@ifnottex
@example
                     ====
              1      \                     4
  KU[X] =  -------    >    f(x ) (x - E[X])   - 3 ,
           D[X]^4    /        i    i
                     ====
                      x
                       i
@end example
@end ifnottex
@tex
$$KU\left[X\right]={{\sum_{x_{i}}{f\left(x\right)\,
 \left(x-E\left[X\right]\right)^4\;dx}}\over{D\left[X\right]^4}}-3,$$
@end tex
respectivamente.

Por favor, consúltese cualquier manual introductorio de probabilidad y estadística para más información sobre toda esta parafernalia matemática.

Se sigue cierta convención a la hora de nombrar las funciones del paquete @code{distrib}. Cada nombre tiene dos partes, el primero hace referencia a la función o parámetro que se quiere calcular,
@example
Funciones:
   Función de densidad        (pdf_*)
   Función de distribución    (cdf_*)
   Cuantil                    (quantile_*)
   Media                      (mean_*)
   Varianza                   (var_*)
   Desviación típica          (std_*)
   Coeficiente de asimetría   (skewness_*)
   Coeficiente de curtosis    (kurtosis_*)
   Valor aleatorio            (random_*)
@end example

La segunda parte hace referencia explícita al modelo probabilístico,
@example
Distribuciones continuas:
   Normal              (*normal)
   Student             (*student_t)
   Chi^2               (*chi2)
   Chi^2 no central    (*noncentral_chi2)
   F                   (*f)
   Exponencial         (*exp)
   Lognormal           (*lognormal)
   Gamma               (*gamma)
   Beta                (*beta)
   Continua uniforme   (*continuous_uniform)
   Logística           (*logistic)
   Pareto              (*pareto)
   Weibull             (*weibull)
   Rayleigh            (*rayleigh)
   Laplace             (*laplace)
   Cauchy              (*cauchy)
   Gumbel              (*gumbel)

Distribuciones discretas:
   Binomial             (*binomial)
   Poisson              (*poisson)
   Bernoulli            (*bernoulli)
   Geométrica           (*geometric)
   Uniforme discreta    (*discrete_uniform)
   Hipergeométrica      (*hypergeometric)
   Binomial negativa    (*negative_binomial)
   Finita discreta      (*general_finite_discrete)
@end example

Por ejemplo, @code{pdf_student_t(x,n)} es la función de densidad de la distribución de Student con @var{n} grados de libertad, @code{std_pareto(a,b)} es la desviación típica de la distribución de Pareto de parámetros @var{a} y @var{b}, y @code{kurtosis_poisson(m)} es el coeficiente de curtosis de la distribución de Poisson de media @var{m}.


Para poder hacer uso del paquete @code{distrib} es necesario cargarlo primero tecleando
@example
(%i1) load(distrib)$
@end example

Para comentarios, errores o sugerencias, por favor contáctese conmigo en @var{'riotorto AT yahoo DOT com'}.

@node Funciones y variables para distribuciones continuas, Funciones y variables para distribuciones discretas, Introducción a distrib, distrib
@section Funciones y variables para distribuciones continuas


@deffn {Función} pdf_normal (@var{x},@var{m},@var{s})
Devuelve el valor correspondiente a @var{x} de la función de densidad de la variable aleatoria @i{Normal}@math{(m,s)}, con @math{s>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} cdf_normal (@var{x},@var{m},@var{s})
Devuelve el valor correspondiente a @var{x} de la función de distribución de la variable aleatoria @i{Normal}@math{(m,s)}, con @math{s>0}. Esta función se define en términos de la función de error,  @code{erf}, de Maxima.

@c ===beg===
@c load (distrib)$
@c cdf_normal(x,m,s);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_normal(x,m,s);
                                    x - m
                              erf(---------)
                                  sqrt(2) s    1
(%o2)                         -------------- + -
                                    2          2
@end example

Véase también @code{erf}.
@end deffn


@deffn {Función} quantile_normal (@var{q},@var{m},@var{s})
Devuelve el @var{q}-cuantil de una variable aleatoria @i{Normal}@math{(m,s)}, con @math{s>0}; en otras palabras, es la inversa de  @code{cdf_normal}. El argumento @var{q} debe ser un número de @math{[0,1]}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.

@c ===beg===
@c load (distrib)$
@c quantile_normal(95/100,0,1);
@c float(%);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) quantile_normal(95/100,0,1);
                                      9
(%o2)             sqrt(2) inverse_erf(--)
                                      10
(%i3) float(%);
(%o3)               1.644853626951472
@end example

@end deffn


@deffn {Función} mean_normal (@var{m},@var{s})
Devuelve la media de  una variable aleatoria @i{Normal}@math{(m,s)}, con @math{s>0}, es decir @var{m}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} var_normal (@var{m},@var{s})
Devuelve la varianza de  una variable aleatoria @i{Normal}@math{(m,s)}, con @math{s>0}, es decir @var{s^2}.
@end deffn

@deffn {Función} std_normal (@var{m},@var{s})
Devuelve la desviación típica de  una variable aleatoria @i{Normal}@math{(m,s)}, con @math{s>0}, es decir @var{s}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} skewness_normal (@var{m},@var{s})
Devuelve el coeficiente de asimetría de una variable aleatoria @i{Normal}@math{(m,s)}, con @math{s>0}, que es siempre igual a 0. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} kurtosis_normal (@var{m},@var{s})
Devuelve el coeficiente de curtosis de una variable aleatoria @i{Normal}@math{(m,s)}, con @math{s>0}, que es siempre igual a 0. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} random_normal (@var{m},@var{s})
@deffnx {Función} random_normal (@var{m},@var{s},@var{n})
Devuelve un valor aleatorio  @i{Normal}@math{(m,s)}, con @math{s>0}. Llamando a @code{random_normal} con un tercer argumento @var{n}, se simula una muestra aleatoria de tamaño @var{n}.

El algoritmo de simulación es el de Box-Mueller, tal como está descrito en Knuth, D.E. (1981) @var{Seminumerical Algorithms. The Art of Computer Programming.} Addison-Wesley.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} pdf_student_t (@var{x},@var{n})
Devuelve el valor correspondiente a @var{x} de la función de densidad de una variable aleatoria de Student @math{t(n)}, con @math{n>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} cdf_student_t (@var{x},@var{n})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria de Student @math{t(n)}, con @math{n>0}.

@c ===beg===
@c load (distrib)$
@c cdf_student_t(1/2, 7/3);
@c float(%);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_student_t(1/2, 7/3);
@group
                                         7  1  28
             beta_incomplete_regularized(-, -, --)
                                         6  2  31
(%o2)    1 - -------------------------------------
                               2
@end group
(%i3) float(%);
(%o3)                .6698450596140415
@end example
@end deffn


@deffn {Función} quantile_student_t (@var{q},@var{n})
Devuelve el @var{q}-cuantil de una variable aleatoria de Student @math{t(n)}, con @math{n>0}; en otras palabras, se trata de la inversa de  @code{cdf_student_t}. El argumento @var{q} debe ser un número de @math{[0,1]}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} mean_student_t (@var{n})
Devuelve la media de una variable aleatoria de Student @math{t(n)}, con @math{n>0}, que vale siempre 0. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} var_student_t (@var{n})
Devuelve la varianza de una variable aleatoria de Student @math{t(n)}, con @math{n>2}.

@c ===beg===
@c load (distrib)$
@c var_student_t(n);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) var_student_t(n);
                                n
(%o2)                         -----
                              n - 2
@end example
@end deffn


@deffn {Función} std_student_t (@var{n})
Devuelve la desviación típica de una variable aleatoria de Student @math{t(n)}, con @math{n>2}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} skewness_student_t (@var{n})
Devuelve el coeficiente de asimetría de una variable aleatoria de Student @math{t(n)}, con @math{n>3}, que vale siempre 0. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} kurtosis_student_t (@var{n})
Devuelve el coeficiente de curtosis una variable aleatoria de Student @math{t(n)}, con @math{n>4}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} random_student_t (@var{n})
@deffnx {Función} random_student_t (@var{n},@var{m})
Devuelve un valor aleatorio @math{t(n)}, con @math{n>0}. Llamando a @code{random_student_t} con un segundo argumento @var{m}, se obtiene una muestra aleatoria simulada de tamaño @var{m}.

El algoritmo utilizado está basado en el hecho de que si @var{Z} es una variable aleatoria normal @math{N(0,1)} y @math{S^2} es una chi cuadrada de @var{n} grados de libertad, @math{Chi^2(n)}, entonces
@ifnottex
@example
                           Z
                 X = -------------
                     /   2  \ 1/2
                     |  S   |
                     | ---  |
                     \  n   /
@end example
@end ifnottex
@tex
$$X={{Z}\over{\sqrt{{S^2}\over{n}}}}$$
@end tex

es una variable aleatoria de Student de @var{n} grados de libertad, @math{t(n)}.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} pdf_noncentral_student_t (@var{x},@var{n},@var{ncp})
Devuelve el valor correspondiente a @var{x} de la función de densidad de una variable aleatoria no central de Student @math{nc_t(n,ncp)}, con @math{n>0} grados de libertad y parámetro de no centralidad @math{ncp}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.

En ocasiones es necesario hacer algún trabajo extra para obtener el resultado final.

@c ===beg===
@c load (distrib)$
@c expand(pdf_noncentral_student_t(3,5,0.1));
@c float(%);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) expand(pdf_noncentral_student_t(3,5,0.1));
                           7/2                         7/2
      0.04296414417400905 5      1.323650307289301e-6 5
(%o2) ------------------------ + -------------------------
         3/2   5/2                       sqrt(%pi)
        2    14    sqrt(%pi)
                                                        7/2
                                   1.94793720435093e-4 5
                                 + ------------------------
                                             %pi
(%i3) float(%);
(%o3)          .02080593159405669
@end example
@end deffn


@deffn {Función} cdf_noncentral_student_t (@var{x},@var{n},@var{ncp})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria no central de Student @math{nc_t(n,ncp)}, con @math{n>0} grados de libertad y parámetro de no centralidad @math{ncp}. Esta función no tiene expresión compacta y se calcula numéricamente. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.

@c ===beg===
@c load (distrib)$
@c cdf_noncentral_student_t(-2,5,-5);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_noncentral_student_t(-2,5,-5);
(%o2)          .9952030093319743
@end example

@end deffn


@deffn {Función} quantile_noncentral_student_t (@var{q},@var{n},@var{ncp})
Devuelve el @var{q}-cuantil de una variable aleatoria no central de Student @math{nc_t(n,ncp)}, con @math{n>0} grados de libertad y parámetro de no centralidad @math{ncp}; en otras palabras, se trata de la inversa de @code{cdf_noncentral_student_t}. El argumento @var{q} debe ser un número de @math{[0,1]}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} mean_noncentral_student_t (@var{n},@var{ncp})
Devuelve la media de una variable aleatoria no central de Student @math{nc_t(n,ncp)}, con @math{n>1} grados de libertad y parámetro de no centralidad @math{ncp}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.

@c ===beg===
@c load (distrib)$
@c mean_noncentral_student_t(df,k);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) mean_noncentral_student_t(df,k);
                   df - 1
             gamma(------) sqrt(df) k
                     2
(%o2)        ------------------------
                              df
                sqrt(2) gamma(--)
                              2
@end example

@end deffn


@deffn {Función} var_noncentral_student_t (@var{n},@var{ncp})
Devuelve la varianza de una variable aleatoria no central de Student @math{nc_t(n,ncp)}, con @math{n>2} grados de libertad y parámetro de no centralidad @math{ncp}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} std_noncentral_student_t (@var{n},@var{ncp})
Devuelve la desviación típica de una variable aleatoria no central de Student @math{nc_t(n,ncp)}, con @math{n>2} grados de libertad y parámetro de no centralidad @math{ncp}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} skewness_noncentral_student_t (@var{n},@var{ncp})
Devuelve el coeficiente de asimetría de una variable aleatoria no central de Student @math{nc_t(n,ncp)}, con @math{n>3} grados de libertad y parámetro de no centralidad @math{ncp}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} kurtosis_noncentral_student_t (@var{n},@var{ncp})
Devuelve el coeficiente de curtosis de una variable aleatoria no central de Student @math{nc_t(n,ncp)}, con @math{n>4} grados de libertad y parámetro de no centralidad @math{ncp}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} random_noncentral_student_t (@var{n},@var{ncp})
@deffnx {Función} random_noncentral_student_t (@var{n},@var{ncp},@var{m})
Devuelve un valor aleatorio @math{nc_t(n,ncp)}, con @math{n>0}. Llamando a @code{random_noncentral_student_t} con un tercer argumento @var{m}, se obtiene una muestra aleatoria simulada de tamaño @var{m}.

El algoritmo utilizado está basado en el hecho de que si @var{X} es una variable aleatoria normal @math{N(ncp,1)} y @math{S^2} es una chi cuadrada de @var{n} grados de libertad, @math{Chi^2(n)}, entonces
@ifnottex
@example
                           X
                 U = -------------
                     /   2  \ 1/2
                     |  S   |
                     | ---  |
                     \  n   /
@end example
@end ifnottex
@tex
$$U={{X}\over{\sqrt{{S^2}\over{n}}}}$$
@end tex

es una variable aleatoria no central de Student de @var{n} grados de libertad y parámetro de no centralidad @math{ncp}, @math{nc_t(n,ncp)}.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} pdf_chi2 (@var{x},@var{n})
Devuelve el valor correspondiente a @var{x} de la función de densidad de una variable aleatoria chi-cuadrado @math{Chi^2(n)}, con @math{n>0}. La variable aleatoria @math{Chi^2(n)} equivale a una @i{Gamma}@math{(n/2,2)}.

@c ===beg===
@c load (distrib)$
@c pdf_chi2(x,n);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) pdf_chi2(x,n);
                         n/2 - 1   - x/2
                        x        %e
(%o2)                   ----------------
                          n/2       n
                         2    gamma(-)
                                    2
@end example
@end deffn


@deffn {Función} cdf_chi2 (@var{x},@var{n})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria chi-cuadrado @math{Chi^2(n)}, con @math{n>0}.

@c ===beg===
@c load (distrib)$
@c cdf_chi2(3,4);
@c float(%);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_chi2(3,4);
                                               3
(%o2)      1 - gamma_incomplete_regularized(2, -)
                                               2
(%i3) float(%);
(%o3)               .4421745996289256
@end example
@end deffn


@deffn {Función} quantile_chi2 (@var{q},@var{n})
Devuelve el @var{q}-cuantil de una variable aleatoria @math{Chi^2(n)}, con @math{n>0}; en otras palabras, se trata de la inversa de  @code{cdf_chi2}. El argumento @var{q} debe ser un número de @math{[0,1]}.

Esta función no tiene expresión compacta y se calcula numéricamente.

@c ===beg===
@c load (distrib)$
@c quantile_chi2(0.99,9);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) quantile_chi2(0.99,9);
(%o2)                   21.66599433346194
@end example
@end deffn


@deffn {Función} mean_chi2 (@var{n})
Devuelve la media de  una variable aleatoria  @math{Chi^2(n)}, con @math{n>0}.

La variable aleatoria @math{Chi^2(n)} equivale a una @i{Gamma}@math{(n/2,2)}.

@c ===beg===
@c load (distrib)$
@c mean_chi2(n);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) mean_chi2(n);
(%o2)                           n
@end example
@end deffn


@deffn {Función} var_chi2 (@var{n})
Devuelve la varianza de  una variable aleatoria  @math{Chi^2(n)}, con @math{n>0}.

La variable aleatoria @math{Chi^2(n)} equivale a una @i{Gamma}@math{(n/2,2)}.

@c ===beg===
@c load (distrib)$
@c var_chi2(n);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) var_chi2(n);
(%o2)                          2 n
@end example
@end deffn


@deffn {Función} std_chi2 (@var{n})
Devuelve la desviación típica de  una variable aleatoria  @math{Chi^2(n)}, con @math{n>0}.

La variable aleatoria @math{Chi^2(n)} equivale a una @i{Gamma}@math{(n/2,2)}.

@c ===beg===
@c load (distrib)$
@c std_chi2(n);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) std_chi2(n);
(%o2)                    sqrt(2) sqrt(n)
@end example
@end deffn


@deffn {Función} skewness_chi2 (@var{n})
Devuelve el coeficiente de asimetría de una variable aleatoria  @math{Chi^2(n)}, con @math{n>0}.

La variable aleatoria @math{Chi^2(n)} equivale a una @i{Gamma}@math{(n/2,2)}.

@c ===beg===
@c load (distrib)$
@c skewness_chi2(n);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) skewness_chi2(n);
@group
                                     3/2
                                    2
(%o2)                              -------
                                   sqrt(n)
@end group
@end example
@end deffn


@deffn {Función} kurtosis_chi2 (@var{n})
Devuelve el coeficiente de curtosis una variable aleatoria  @math{Chi^2(n)}, con @math{n>0}.

La variable aleatoria @math{Chi^2(n)} equivale a una @i{Gamma}@math{(n/2,2)}.

@c ===beg===
@c load (distrib)$
@c kurtosis_chi2(n);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) kurtosis_chi2(n);
                               12
(%o2)                          --
                               n
@end example
@end deffn


@deffn {Función} random_chi2 (@var{n})
@deffnx {Función} random_chi2 (@var{n},@var{m})
Devuelve un valor aleatorio  @math{Chi^2(n)}, con @math{n>0}. Llamando a @code{random_chi2} con un segundo argumento @var{m}, se simulará una muestra aleatoria de tamaño @var{m}.

La simulación está basada en el algoritmo de Ahrens-Cheng. Véase @code{random_gamma} para más detalles.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} pdf_noncentral_chi2 (@var{x},@var{n},@var{ncp})
Devuelve el valor correspondiente a @var{x} de la función de densidad de una variable aleatoria chi-cuadrado no centrada @math{nc_Chi^2(n,ncp)}, con @math{n>0} y parámetro de no centralidad @math{ncp>=0}. Para hacer uso de esta función ejecútese primero @code{load(distrib)}.

@end deffn


@deffn {Función} cdf_noncentral_chi2 (@var{x},@var{n},@var{ncp})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria chi-cuadrado no centrada @math{nc_Chi^2(n,ncp)}, con @math{n>0} y parámetro de no centralidad @math{ncp>=0}.

@end deffn


@deffn {Función} quantile_noncentral_chi2 (@var{q},@var{n},@var{ncp})
Devuelve el @var{q}-cuantil de una variable aleatoria chi-cuadrado no centrada @math{nc_Chi^2(n,ncp)}, con @math{n>0} y parámetro de no centralidad @math{ncp>=0}; en otras palabras, se trata de la inversa de  @code{cdf_noncentral_chi2}. El argumento @var{q} debe ser un número de @math{[0,1]}.

Esta función no tiene expresión compacta y se calcula numéricamente.

@end deffn


@deffn {Función} mean_noncentral_chi2 (@var{n},@var{ncp})
Devuelve la media de  una variable aleatoria chi-cuadrado no centrada @math{nc_Chi^2(n,ncp)}, con @math{n>0} y parámetro de no centralidad @math{ncp>=0}.

@end deffn


@deffn {Función} var_noncentral_chi2 (@var{n},@var{ncp})
Devuelve la varianza de  una variable aleatoria chi-cuadrado no centrada  @math{nc_Chi^2(n,ncp)}, con @math{n>0} y parámetro de no centralidad @math{ncp>=0}.

@end deffn


@deffn {Función} std_noncentral_chi2 (@var{n},@var{ncp})
Devuelve la desviación típica de  una variable aleatoria chi-cuadrado no centrada  @math{nc_Chi^2(n,ncp)}, con @math{n>0} y parámetro de no centralidad @math{ncp>=0}.

@end deffn


@deffn {Función} skewness_noncentral_chi2 (@var{n},@var{ncp})
Devuelve el coeficiente de asimetría de una variable aleatoria chi-cuadrado no centrada  @math{nc_Chi^2(n,ncp)}, con @math{n>0} y parámetro de no centralidad @math{ncp>=0}.

@end deffn


@deffn {Función} kurtosis_noncentral_chi2 (@var{n},@var{ncp})
Devuelve el coeficiente de curtosis una variable aleatoria chi-cuadrado no centrada @math{nc_Chi^2(n,ncp)}, con @math{n>0} y parámetro de no centralidad @math{ncp>=0}.

@end deffn


@deffn {Función} random_noncentral_chi2 (@var{n},@var{ncp})
@deffnx {Función} random_noncentral_chi2 (@var{n},@var{ncp},@var{m})
Devuelve un valor aleatorio  @math{nc_Chi^2(n,ncp)}, con @math{n>0} y parámetro de no centralidad @math{ncp>=0}. Llamando a @code{random_noncentral_chi2} con un tercer argumento @var{m}, se simulará una muestra aleatoria de tamaño @var{m}.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.

@end deffn


@deffn {Función} pdf_f (@var{x},@var{m},@var{n})
Devuelve el valor correspondiente a @var{x} de la función de densidad de una variable aleatoria  @i{F}@math{(m,n)}, con @math{m,n>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} cdf_f (@var{x},@var{m},@var{n})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria  @i{F}@math{(m,n)}, con @math{m,n>0}.

@c ===beg===
@c load (distrib)$
@c cdf_f(2,3,9/4);
@c float(%);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_f(2,3,9/4);
                                         9  3  3
(%o2)    1 - beta_incomplete_regularized(-, -, --)
                                         8  2  11
(%i3) float(%);
(%o3)                 0.66756728179008
@end example
@end deffn


@deffn {Función} quantile_f (@var{q},@var{m},@var{n})
Devuelve el @var{q}-cuantil de una variable aleatoria  @i{F}@math{(m,n)}, con @math{m,n>0}; en otras palabras, se trata de la inversa de  @code{cdf_f}. El argumento @var{q} debe ser un número de @math{[0,1]}.

@c ===beg===
@c load (distrib)$
@c quantile_f(2/5,sqrt(3),5);
@c %,numer;
@c ===end===
@example
(%i1) load (distrib)$
(%i2) quantile_f(2/5,sqrt(3),5);
                               2
(%o2)               quantile_f(-, sqrt(3), 5)
                               5
(%i3) %,numer;
(%o3)                   0.518947838573693
@end example
@end deffn


@deffn {Función} mean_f (@var{m},@var{n})
Devuelve la media de  una variable aleatoria  @i{F}@math{(m,n)}, con @math{m>0, n>2}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} var_f (@var{m},@var{n})
Devuelve la varianza de  una variable aleatoria  @i{F}@math{(m,n)}, con @math{m>0, n>4}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} std_f (@var{m},@var{n})
Devuelve la desviación típica de  una variable aleatoria  @i{F}@math{(m,n)}, con @math{m>0, n>4}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} skewness_f (@var{m},@var{n})
Devuelve el coeficiente de asimetría de una variable aleatoria  @i{F}@math{(m,n)}, con @math{m>0, n>6}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} kurtosis_f (@var{m},@var{n})
Devuelve el coeficiente de curtosis una variable aleatoria  @i{F}@math{(m,n)}, con @math{m>0, n>8}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} random_f (@var{m},@var{n})
@deffnx {Función} random_f (@var{m},@var{n},@var{k})
Devuelve un valor aleatorio  @i{F}@math{(m,n)}, con @math{m,n>0}. Llamando a  @code{random_f} con un tercer argumento @var{k}, se simulará una muestra aleatoria de tamaño @var{k}.

El algoritmo de simulación está basado en el hecho de que si @var{X} es una variable aleatoria @math{Chi^2(m)} y @math{Y} es una @math{Chi^2(n)}, entonces
@ifnottex
@example
                        n X
                    F = ---
                        m Y
@end example
@end ifnottex
@tex
$$F={{n X}\over{m Y}}$$
@end tex

es una variable aleatoria @math{F} con @var{m} y @var{n} grados de libertad, @i{F}@math{(m,n)}.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} pdf_exp (@var{x},@var{m})
Devuelve el valor correspondiente a @var{x} de la función de densidad de una variable aleatoria @i{Exponencial}@math{(m)}, con @math{m>0}.

La variable aleatoria @i{Exponencial}@math{(m)} equivale a una @i{Weibull}@math{(1,1/m)}.

@c ===beg===
@c load (distrib)$
@c pdf_exp(x,m);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) pdf_exp(x,m);
                                - m x
(%o2)                       m %e
@end example
@end deffn


@deffn {Función} cdf_exp (@var{x},@var{m})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria @i{Exponencial}@math{(m)}, con @math{m>0}.

La variable aleatoria @i{Exponencial}@math{(m)} equivale a una @i{Weibull}@math{(1,1/m)}.

@c ===beg===
@c load (distrib)$
@c cdf_exp(x,m);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_exp(x,m);
                                 - m x
(%o2)                      1 - %e
@end example
@end deffn


@deffn {Función} quantile_exp (@var{q},@var{m})
Devuelve el @var{q}-cuantil de una variable aleatoria @i{Exponencial}@math{(m)}, con @math{m>0}; en otras palabras, se trata de la inversa de  @code{cdf_exp}. El argumento @var{q} debe ser un número de @math{[0,1]}.

La variable aleatoria @i{Exponencial}@math{(m)} equivale a una @i{Weibull}@math{(1,1/m)}.

@c ===beg===
@c load (distrib)$
@c quantile_exp(0.56,5);
@c quantile_exp(0.56,m);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) quantile_exp(0.56,5);
(%o2)                   .1641961104139661
(%i3) quantile_exp(0.56,m);
                                            1
(%o3)             quantile_weibull(0.56, 1, -)
                                            m
@end example
@end deffn


@deffn {Función} mean_exp (@var{m})
Devuelve la media de  una variable aleatoria @i{Exponencial}@math{(m)}, con @math{m>0}.

La variable aleatoria @i{Exponencial}@math{(m)} equivale a una @i{Weibull}@math{(1,1/m)}.

@c ===beg===
@c load (distrib)$
@c mean_exp(m);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) mean_exp(m);
                                1
(%o2)                           -
                                m
@end example
@end deffn


@deffn {Función} var_exp (@var{m})
Devuelve la varianza de  una variable aleatoria @i{Exponencial}@math{(m)}, con @math{m>0}.

La variable aleatoria @i{Exponencial}@math{(m)} equivale a una @i{Weibull}@math{(1,1/m)}.

@c ===beg===
@c load (distrib)$
@c var_exp(m);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) var_exp(m);
                               1
(%o2)                          --
                                2
                               m
@end example
@end deffn


@deffn {Función} std_exp (@var{m})
Devuelve la desviación típica de  una variable aleatoria @i{Exponencial}@math{(m)}, con @math{m>0}.

La variable aleatoria @i{Exponencial}@math{(m)} equivale a una @i{Weibull}@math{(1,1/m)}.

@c ===beg===
@c load (distrib)$
@c std_exp(m);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) std_exp(m);
                                1
(%o2)                           -
                                m
@end example
@end deffn


@deffn {Función} skewness_exp (@var{m})
Devuelve el coeficiente de asimetría de una variable aleatoria @i{Exponencial}@math{(m)}, con @math{m>0}.

La variable aleatoria @i{Exponencial}@math{(m)} equivale a una @i{Weibull}@math{(1,1/m)}.

@c ===beg===
@c load (distrib)$
@c skewness_exp(m);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) skewness_exp(m);
(%o2)                           2
@end example
@end deffn


@deffn {Función} kurtosis_exp (@var{m})
Devuelve el coeficiente de curtosis una variable aleatoria @i{Exponencial}@math{(m)}, con @math{m>0}.

La variable aleatoria @i{Exponencial}@math{(m)} equivale a una @i{Weibull}@math{(1,1/m)}.

@c ===beg===
@c load (distrib)$
@c kurtosis_exp(m);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) kurtosis_exp(m);
(%o3)                           6
@end example
@end deffn


@deffn {Función} random_exp (@var{m})
@deffnx {Función} random_exp (@var{m},@var{k})
Devuelve un valor aleatorio  @i{Exponencial}@math{(m)}, con @math{m>0}. Llamando a @code{random_exp2} con un segundo argumento @var{k}, se simulará una muestra aleatoria de tamaño @var{k}.

El algoritmo de simulación está basado en el método inverso.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} pdf_lognormal (@var{x},@var{m},@var{s})
Devuelve el valor correspondiente a @var{x} de la función de densidad de una variable aleatoria @i{Lognormal}@math{(m,s)}, con @math{s>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} cdf_lognormal (@var{x},@var{m},@var{s})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria @i{Lognormal}@math{(m,s)}, con @math{s>0}.   Esta función se define en términos de la función de error, @code{erf}, de Maxima.

@c ===beg===
@c load (distrib)$
@c assume(x>0, s>0)$  cdf_lognormal(x,m,s);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) assume(x>0, s>0)$  cdf_lognormal(x,m,s);
@group
                           log(x) - m
                       erf(----------)
                           sqrt(2) s     1
(%o2)                  --------------- + -
                              2          2
@end group
@end example

Véase también @code{erf}.
@end deffn


@deffn {Función} quantile_lognormal (@var{q},@var{m},@var{s})
Devuelve el @var{q}-cuantil de una variable aleatoria @i{Lognormal}@math{(m,s)}, con @math{s>0}; en otras palabras, se trata de la inversa de  @code{cdf_lognormal}. El argumento @var{q} debe ser un número de @math{[0,1]}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} mean_lognormal (@var{m},@var{s})
Devuelve la media de  una variable aleatoria @i{Lognormal}@math{(m,s)}, con @math{s>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} var_lognormal (@var{m},@var{s})
Devuelve la varianza de  una variable aleatoria @i{Lognormal}@math{(m,s)}, con @math{s>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn

@deffn {Función} std_lognormal (@var{m},@var{s})
Devuelve la desviación típica de  una variable aleatoria @i{Lognormal}@math{(m,s)}, con @math{s>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} skewness_lognormal (@var{m},@var{s})
Devuelve el coeficiente de asimetría de una variable aleatoria @i{Lognormal}@math{(m,s)}, con @math{s>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} kurtosis_lognormal (@var{m},@var{s})
Devuelve el coeficiente de curtosis una variable aleatoria @i{Lognormal}@math{(m,s)}, con @math{s>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} random_lognormal (@var{m},@var{s})
@deffnx {Función} random_lognormal (@var{m},@var{s},@var{n})
Devuelve un valor aleatorio  @i{Lognormal}@math{(m,s)}, con @math{s>0}. Llamando a @code{random_lognormal} con un tercer argumento @var{n}, se simulará una muestra aleatoria de tamaño @var{n}.

Las variables lognormales se simulan mediante variables normales. Véase @code{random_normal} para más detalles.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} pdf_gamma (@var{x},@var{a},@var{b})
Devuelve el valor correspondiente a @var{x} de la función de densidad de una variable aleatoria @i{Gamma}@math{(a,b)}, con @math{a,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} cdf_gamma (@var{x},@var{a},@var{b})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria @i{Gamma}@math{(a,b)}, con @math{a,b>0}. 

@c ===beg===
@c load (distrib)$
@c cdf_gamma(3,5,21);
@c float(%);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_gamma(3,5,21);
                                              1
(%o2)     1 - gamma_incomplete_regularized(5, -)
                                              7
(%i3) float(%);
(%o3)              4.402663157376807E-7
@end example
@end deffn


@deffn {Función} quantile_gamma (@var{q},@var{a},@var{b})
Devuelve el @var{q}-cuantil de una variable aleatoria @i{Gamma}@math{(a,b)}, con @math{a,b>0}; en otras palabras, se trata de la inversa de  @code{cdf_gamma}. El argumento @var{q} debe ser un número de @math{[0,1]}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} mean_gamma (@var{a},@var{b})
Devuelve la media de  una variable aleatoria @i{Gamma}@math{(a,b)}, con @math{a,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} var_gamma (@var{a},@var{b})
Devuelve la varianza de  una variable aleatoria @i{Gamma}@math{(a,b)}, con @math{a,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn

@deffn {Función} std_gamma (@var{a},@var{b})
Devuelve la desviación típica de  una variable aleatoria @i{Gamma}@math{(a,b)}, con @math{a,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} skewness_gamma (@var{a},@var{b})
Devuelve el coeficiente de asimetría de una variable aleatoria @i{Gamma}@math{(a,b)}, con @math{a,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} kurtosis_gamma (@var{a},@var{b})
Devuelve el coeficiente de curtosis una variable aleatoria @i{Gamma}@math{(a,b)}, con @math{a,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} random_gamma (@var{a},@var{b})
@deffnx {Función} random_gamma (@var{a},@var{b},@var{n})
Devuelve un valor aleatorio  @i{Gamma}@math{(a,b)}, con @math{a,b>0}. Llamando a @code{random_gamma} con un tercer argumento @var{n}, se simulará una muestra aleatoria de tamaño @var{n}.

El algoritmo de simulación es una combinación de dos procedimientos, según sea el valor del parámetro @var{a}:

Para @math{a>=1}, Cheng, R.C.H. y Feast, G.M. (1979). @var{Some simple gamma variate generators}. Appl. Stat., 28, 3, 290-295.

Para @math{0<a<1}, Ahrens, J.H. y Dieter, U. (1974). @var{Computer methods for sampling from gamma, beta, poisson and binomial distributions}. Computing, 12, 223-246.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} pdf_beta (@var{x},@var{a},@var{b})
Devuelve el valor correspondiente a @var{x} de la función de densidad de una variable aleatoria @i{Beta}@math{(a,b)}, con @math{a,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} cdf_beta (@var{x},@var{a},@var{b})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria @i{Beta}@math{(a,b)}, con @math{a,b>0}.

@c ===beg===
@c load (distrib)$
@c cdf_beta(1/3,15,2);
@c float(%);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_beta(1/3,15,2);
                             11
(%o2)                     --------
                          14348907
(%i3) float(%);
(%o3)              7.666089131388195E-7
@end example
@end deffn


@deffn {Función} quantile_beta (@var{q},@var{a},@var{b})
Devuelve el @var{q}-cuantil de una variable aleatoria @i{Beta}@math{(a,b)}, con @math{a,b>0}; en otras palabras, se trata de la inversa de  @code{cdf_beta}. El argumento @var{q} debe ser un número de @math{[0,1]}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} mean_beta (@var{a},@var{b})
Devuelve la media de  una variable aleatoria @i{Beta}@math{(a,b)}, con @math{a,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} var_beta (@var{a},@var{b})
Devuelve la varianza de  una variable aleatoria @i{Beta}@math{(a,b)}, con @math{a,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn

@deffn {Función} std_beta (@var{a},@var{b})
Devuelve la desviación típica de  una variable aleatoria @i{Beta}@math{(a,b)}, con @math{a,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} skewness_beta (@var{a},@var{b})
Devuelve el coeficiente de asimetría de una variable aleatoria @i{Beta}@math{(a,b)}, con @math{a,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} kurtosis_beta (@var{a},@var{b})
Devuelve el coeficiente de curtosis de una variable aleatoria @i{Beta}@math{(a,b)}, con @math{a,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} random_beta (@var{a},@var{b})
@deffnx {Función} random_beta (@var{a},@var{b},@var{n})
Devuelve un valor aleatorio @i{Beta}@math{(a,b)}, con @math{a,b>0}. Llamando a @code{random_beta} con un tercer argumento @var{n}, se simulará una muestra aleatoria de tamaño  @var{n}.

El algoritmo de simulación es el decrito en Cheng, R.C.H. (1978). @var{Generating Beta Variates with Nonintegral Shape Parameters}. Communications of the ACM, 21:317-322.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn

@deffn {Función} pdf_continuous_uniform (@var{x},@var{a},@var{b})
Devuelve el valor correspondiente a @var{x} de la función de densidad de una variable aleatoria  @i{Uniforme Continua}@math{(a,b)}, con @math{a<b}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} cdf_continuous_uniform (@var{x},@var{a},@var{b})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria  @i{Uniforme Continua}@math{(a,b)}, con @math{a<b}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} quantile_continuous_uniform (@var{q},@var{a},@var{b})
Devuelve el @var{q}-cuantil de una variable aleatoria  @i{Uniforme Continua}@math{(a,b)}, con @math{a<b}; en otras palabras, se trata de la inversa de  @code{cdf_continuous_uniform}. El argumento @var{q} debe ser un número de @math{[0,1]}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} mean_continuous_uniform (@var{a},@var{b})
Devuelve la media de  una variable aleatoria  @i{Uniforme Continua}@math{(a,b)}, con @math{a<b}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} var_continuous_uniform (@var{a},@var{b})
Devuelve la varianza de  una variable aleatoria  @i{Uniforme Continua}@math{(a,b)}, con @math{a<b}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn

@deffn {Función} std_continuous_uniform (@var{a},@var{b})
Devuelve la desviación típica de  una variable aleatoria  @i{Uniforme Continua}@math{(a,b)}, con @math{a<b}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} skewness_continuous_uniform (@var{a},@var{b})
Devuelve el coeficiente de asimetría de una variable aleatoria  @i{Uniforme Continua}@math{(a,b)}, con @math{a<b}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} kurtosis_continuous_uniform (@var{a},@var{b})
Devuelve el coeficiente de curtosis una variable aleatoria  @i{Uniforme Continua}@math{(a,b)}, con @math{a<b}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} random_continuous_uniform (@var{a},@var{b})
@deffnx {Función} random_continuous_uniform (@var{a},@var{b},@var{n})
Devuelve un valor aleatorio  @i{Uniforme Continuo}@math{(a,b)}, con @math{a<b}. Llamando a @code{random_continuous_uniform} con un tercer argumento @var{n}, se simulará una muestra aleatoria de tamaño  @var{n}.

Esta función es una aplicación directa de la función  @code{random} de Maxima.

Véase también @code{random}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} pdf_logistic (@var{x},@var{a},@var{b})
Devuelve el valor correspondiente a @var{x} de la función de densidad de una variable aleatoria @i{Logística}@math{(a,b)}, con @math{b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} cdf_logistic (@var{x},@var{a},@var{b})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria @i{Logística}@math{(a,b)}, con @math{b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} quantile_logistic (@var{q},@var{a},@var{b})
Devuelve el @var{q}-cuantil de una variable aleatoria @i{Logística}@math{(a,b)}, con @math{b>0}; en otras palabras, se trata de la inversa de  @code{cdf_logistic}. El argumento @var{q} debe ser un número de @math{[0,1]}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} mean_logistic (@var{a},@var{b})
Devuelve la media de  una variable aleatoria @i{Logística}@math{(a,b)}, con @math{b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} var_logistic (@var{a},@var{b})
Devuelve la varianza de  una variable aleatoria @i{Logística}@math{(a,b)}, con @math{b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} std_logistic (@var{a},@var{b})
Devuelve la desviación típica de  una variable aleatoria @i{Logística}@math{(a,b)}, con @math{b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} skewness_logistic (@var{a},@var{b})
Devuelve el coeficiente de asimetría de una variable aleatoria @i{Logística}@math{(a,b)}, con @math{b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} kurtosis_logistic (@var{a},@var{b})
Devuelve el coeficiente de curtosis una variable aleatoria @i{Logística}@math{(a,b)}, con @math{b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} random_logistic (@var{a},@var{b})
@deffnx {Función} random_logistic (@var{a},@var{b},@var{n})
Devuelve un valor aleatorio  @i{Logístico}@math{(a,b)}, con @math{b>0}. Llamando a  @code{random_logistic} con un tercer argumento @var{n}, se simulará una muestra aleatoria de tamaño  @var{n}.

El algoritmo de simulación está basado en el método inverso.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} pdf_pareto (@var{x},@var{a},@var{b})
Devuelve el valor correspondiente a @var{x} de la función de densidad de una variable aleatoria de @i{Pareto}@math{(a,b)}, con @math{a,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} cdf_pareto (@var{x},@var{a},@var{b})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria de @i{Pareto}@math{(a,b)}, con @math{a,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} quantile_pareto (@var{q},@var{a},@var{b})
Devuelve el @var{q}-cuantil de una variable aleatoria de @i{Pareto}@math{(a,b)}, con @math{a,b>0}; en otras palabras, se trata de la inversa de  @code{cdf_pareto}. El argumento @var{q} debe ser un número de @math{[0,1]}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} mean_pareto (@var{a},@var{b})
Devuelve la media de  una variable aleatoria de @i{Pareto}@math{(a,b)}, con @math{a>1,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} var_pareto (@var{a},@var{b})
Devuelve la varianza de  una variable aleatoria de @i{Pareto}@math{(a,b)}, con @math{a>2,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn

@deffn {Función} std_pareto (@var{a},@var{b})
Devuelve la desviación típica de  una variable aleatoria de @i{Pareto}@math{(a,b)}, con @math{a>2,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn



@deffn {Función} skewness_pareto (@var{a},@var{b})
Devuelve el coeficiente de asimetría de una variable aleatoria de @i{Pareto}@math{(a,b)}, con @math{a>3,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} kurtosis_pareto (@var{a},@var{b})
Devuelve el coeficiente de curtosis de una variable aleatoria de @i{Pareto}@math{(a,b)}, con @math{a>4,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} random_pareto (@var{a},@var{b})
@deffnx {Función} random_pareto (@var{a},@var{b},@var{n})
Devuelve un valor aleatorio  @i{Pareto}@math{(a,b)}, con @math{a>0,b>0}. Llamando a  @code{random_pareto} con un tercer argumento @var{n}, se simulará una muestra aleatoria de tamaño  @var{n}.

El algoritmo de simulación está basado en el método inverso.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} pdf_weibull (@var{x},@var{a},@var{b})
Devuelve el valor correspondiente a @var{x} de la función de densidad de una variable aleatoria de @i{Weibull}@math{(a,b)}, con @math{a,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} cdf_weibull (@var{x},@var{a},@var{b})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria de @i{Weibull}@math{(a,b)}, con @math{a,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} quantile_weibull (@var{q},@var{a},@var{b})
Devuelve el @var{q}-cuantil de una variable aleatoria de @i{Weibull}@math{(a,b)}, con @math{a,b>0}; en otras palabras, se trata de la inversa de  @code{cdf_weibull}. El argumento @var{q} debe ser un número de @math{[0,1]}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} mean_weibull (@var{a},@var{b})
Devuelve la media de  una variable aleatoria de @i{Weibull}@math{(a,b)}, con @math{a,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} var_weibull (@var{a},@var{b})
Devuelve la varianza de  una variable aleatoria de @i{Weibull}@math{(a,b)}, con @math{a,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn

@deffn {Función} std_weibull (@var{a},@var{b})
Devuelve la desviación típica de  una variable aleatoria de @i{Weibull}@math{(a,b)}, con @math{a,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn



@deffn {Función} skewness_weibull (@var{a},@var{b})
Devuelve el coeficiente de asimetría de una variable aleatoria de @i{Weibull}@math{(a,b)}, con @math{a,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} kurtosis_weibull (@var{a},@var{b})
Devuelve el coeficiente de curtosis una variable aleatoria de @i{Weibull}@math{(a,b)}, con @math{a,b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} random_weibull (@var{a},@var{b})
@deffnx {Función} random_weibull (@var{a},@var{b},@var{n})
Devuelve un valor aleatorio  @i{Weibull}@math{(a,b)}, con @math{a,b>0}. Llamando a  @code{random_weibull} con un tercer argumento @var{n}, se simulará una muestra aleatoria de tamaño  @var{n}.

El algoritmo de simulación está basado en el método inverso.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn



@deffn {Función} pdf_rayleigh (@var{x},@var{b})
Devuelve el valor correspondiente a @var{x} de la función de densidad de una variable aleatoria de @i{Rayleigh}@math{(b)}, con @math{b>0}.

La variable aleatoria @i{Rayleigh}@math{(b)} equivale a una @i{Weibull}@math{(2,1/b)}.

@c ===beg===
@c load (distrib)$
@c pdf_rayleigh(x,b);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) pdf_rayleigh(x,b);
                                    2  2
                           2     - b  x
(%o2)                   2 b  x %e
@end example
@end deffn


@deffn {Función} cdf_rayleigh (@var{x},@var{b})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria de @i{Rayleigh}@math{(b)}, con @math{b>0}.

La variable aleatoria @i{Rayleigh}@math{(b)} equivale a una @i{Weibull}@math{(2,1/b)}.

@c ===beg===
@c load (distrib)$
@c cdf_rayleigh(x,b);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_rayleigh(x,b);
                                   2  2
                                - b  x
(%o2)                     1 - %e
@end example
@end deffn


@deffn {Función} quantile_rayleigh (@var{q},@var{b})
Devuelve el @var{q}-cuantil de una variable aleatoria de @i{Rayleigh}@math{(b)}, con @math{b>0}; en otras palabras, se trata de la inversa de  @code{cdf_rayleigh}. El argumento @var{q} debe ser un número de @math{[0,1]}.

La variable aleatoria @i{Rayleigh}@math{(b)} equivale a una @i{Weibull}@math{(2,1/b)}.

@c ===beg===
@c load (distrib)$
@c quantile_rayleigh(0.99,b);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) quantile_rayleigh(0.99,b);
                        2.145966026289347
(%o2)                   -----------------
                                b
@end example
@end deffn


@deffn {Función} mean_rayleigh (@var{b})
Devuelve la media de  una variable aleatoria de @i{Rayleigh}@math{(b)}, con @math{b>0}.

La variable aleatoria @i{Rayleigh}@math{(b)} equivale a una @i{Weibull}@math{(2,1/b)}.

@c ===beg===
@c load (distrib)$
@c mean_rayleigh(b);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) mean_rayleigh(b);
                            sqrt(%pi)
(%o2)                       ---------
                               2 b
@end example
@end deffn


@deffn {Función} var_rayleigh (@var{b})
Devuelve la varianza de  una variable aleatoria de @i{Rayleigh}@math{(b)}, con @math{b>0}.

La variable aleatoria @i{Rayleigh}@math{(b)} equivale a una @i{Weibull}@math{(2,1/b)}.

@c ===beg===
@c load (distrib)$
@c var_rayleigh(b);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) var_rayleigh(b);
                                 %pi
                             1 - ---
                                  4
(%o2)                        -------
                                2
                               b
@end example
@end deffn


@deffn {Función} std_rayleigh (@var{b})
Devuelve la desviación típica de  una variable aleatoria de @i{Rayleigh}@math{(b)}, con @math{b>0}.

La variable aleatoria @i{Rayleigh}@math{(b)} equivale a una @i{Weibull}@math{(2,1/b)}.

@c ===beg===
@c load (distrib)$
@c std_rayleigh(b);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) std_rayleigh(b);
                                   %pi
                          sqrt(1 - ---)
                                    4
(%o2)                     -------------
                                b
@end example
@end deffn


@deffn {Función} skewness_rayleigh (@var{b})
Devuelve el coeficiente de asimetría de una variable aleatoria de @i{Rayleigh}@math{(b)}, con @math{b>0}.

La variable aleatoria @i{Rayleigh}@math{(b)} equivale a una @i{Weibull}@math{(2,1/b)}.

@c ===beg===
@c load (distrib)$
@c skewness_rayleigh(b);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) skewness_rayleigh(b);
                         3/2
                      %pi      3 sqrt(%pi)
                      ------ - -----------
                        4           4
(%o2)                 --------------------
                               %pi 3/2
                          (1 - ---)
                                4
@end example
@end deffn


@deffn {Función} kurtosis_rayleigh (@var{b})
Devuelve el coeficiente de curtosis una variable aleatoria de @i{Rayleigh}@math{(b)}, con @math{b>0}.

La variable aleatoria @i{Rayleigh}@math{(b)} equivale a una @i{Weibull}@math{(2,1/b)}.

@c ===beg===
@c load (distrib)$
@c kurtosis_rayleigh(b);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) kurtosis_rayleigh(b);
                                  2
                             3 %pi
                         2 - ------
                               16
(%o2)                    ---------- - 3
                              %pi 2
                         (1 - ---)
                               4
@end example
@end deffn


@deffn {Función} random_rayleigh (@var{b})
@deffnx {Función} random_rayleigh (@var{b},@var{n})
Devuelve un valor aleatorio  @i{Rayleigh}@math{(b)}, con @math{b>0}. Llamando a  @code{random_rayleigh} con un segundo argumento @var{n}, se simulará una muestra aleatoria de tamaño  @var{n}.

El algoritmo de simulación está basado en el método inverso.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn



@deffn {Función} pdf_laplace (@var{x},@var{a},@var{b})
Devuelve el valor correspondiente a @var{x} de la función de densidad de una variable aleatoria de @i{Laplace}@math{(a,b)}, con @math{b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} cdf_laplace (@var{x},@var{a},@var{b})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria de @i{Laplace}@math{(a,b)}, con @math{b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} quantile_laplace (@var{q},@var{a},@var{b})
Devuelve el @var{q}-cuantil de una variable aleatoria de @i{Laplace}@math{(a,b)}, con @math{b>0}; en otras palabras, se trata de la inversa de  @code{cdf_laplace}. El argumento @var{q} debe ser un número de @math{[0,1]}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} mean_laplace (@var{a},@var{b})
Devuelve la media de  una variable aleatoria de @i{Laplace}@math{(a,b)}, con @math{b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} var_laplace (@var{a},@var{b})
Devuelve la varianza de  una variable aleatoria de @i{Laplace}@math{(a,b)}, con @math{b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} std_laplace (@var{a},@var{b})
Devuelve la desviación típica de  una variable aleatoria de @i{Laplace}@math{(a,b)}, con @math{b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} skewness_laplace (@var{a},@var{b})
Devuelve el coeficiente de asimetría de una variable aleatoria de @i{Laplace}@math{(a,b)}, con @math{b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} kurtosis_laplace (@var{a},@var{b})
Devuelve el coeficiente de curtosis una variable aleatoria de @i{Laplace}@math{(a,b)}, con @math{b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} random_laplace (@var{a},@var{b})
@deffnx {Función} random_laplace (@var{a},@var{b},@var{n})
Devuelve un valor aleatorio  @i{Laplace}@math{(a,b)}, con @math{b>0}. Llamando a  @code{random_laplace} con un tercer argumento @var{n}, se simulará una muestra aleatoria de tamaño  @var{n}.

El algoritmo de simulación está basado en el método inverso.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn



@deffn {Función} pdf_cauchy (@var{x},@var{a},@var{b})
Devuelve el valor correspondiente a @var{x} de la función de densidad de una variable aleatoria de @i{Cauchy}@math{(a,b)}, con @math{b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} cdf_cauchy (@var{x},@var{a},@var{b})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria de @i{Cauchy}@math{(a,b)}, con @math{b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} quantile_cauchy (@var{q},@var{a},@var{b})
Devuelve el @var{q}-cuantil de una variable aleatoria de @i{Cauchy}@math{(a,b)}, con @math{b>0}; en otras palabras, se trata de la inversa de  @code{cdf_cauchy}. El argumento @var{q} debe ser un número de @math{[0,1]}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} random_cauchy (@var{a},@var{b})
@deffnx {Función} random_cauchy (@var{a},@var{b},@var{n})
Devuelve un valor aleatorio  @i{Cauchy}@math{(a,b)}, con @math{b>0}. Llamando a  @code{random_cauchy} con un tercer argumento @var{n}, se simulará una muestra aleatoria de tamaño  @var{n}.

El algoritmo de simulación está basado en el método inverso.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn



@deffn {Función} pdf_gumbel (@var{x},@var{a},@var{b})
Devuelve el valor correspondiente a @var{x} de la función de densidad de una variable aleatoria de @i{Gumbel}@math{(a,b)}, con @math{b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} cdf_gumbel (@var{x},@var{a},@var{b})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria de @i{Gumbel}@math{(a,b)}, con @math{b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} quantile_gumbel (@var{q},@var{a},@var{b})
Devuelve el @var{q}-cuantil de una variable aleatoria de @i{Gumbel}@math{(a,b)}, con @math{b>0}; en otras palabras, se trata de la inversa de  @code{cdf_gumbel}. El argumento @var{q} debe ser un número de @math{[0,1]}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} mean_gumbel (@var{a},@var{b})
Devuelve la media de  una variable aleatoria de @i{Gumbel}@math{(a,b)}, con @math{b>0}.

@c ===beg===
@c load (distrib)$
@c mean_gumbel(a,b);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) mean_gumbel(a,b);
(%o2)                     %gamma b + a
@end example
donde el símbolo @code{%gamma} representa la constante de Euler-Mascheroni. Véase también @code{%gamma}.
@end deffn


@deffn {Función} var_gumbel (@var{a},@var{b})
Devuelve la varianza de  una variable aleatoria de @i{Gumbel}@math{(a,b)}, con @math{b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} std_gumbel (@var{a},@var{b})
Devuelve la desviación típica de  una variable aleatoria de @i{Gumbel}@math{(a,b)}, con @math{b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} skewness_gumbel (@var{a},@var{b})
Devuelve el coeficiente de asimetría de una variable aleatoria de @i{Gumbel}@math{(a,b)}, con @math{b>0}.

@c ===beg===
@c load (distrib)$
@c skewness_gumbel(a,b);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) skewness_gumbel(a,b);
                                  3/2
                               2 6    zeta(3)
(%o2)                          --------------
                                       3
                                    %pi
@end example
donde @code{zeta} representa la función zeta de Riemann.
@end deffn


@deffn {Función} kurtosis_gumbel (@var{a},@var{b})
Devuelve el coeficiente de curtosis de una variable aleatoria de @i{Gumbel}@math{(a,b)}, con @math{b>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} random_gumbel (@var{a},@var{b})
@deffnx {Función} random_gumbel (@var{a},@var{b},@var{n})
Devuelve un valor aleatorio  @i{Gumbel}@math{(a,b)}, con @math{b>0}. Llamando a  @code{random_gumbel} con un tercer argumento @var{n}, se simulará una muestra aleatoria de tamaño  @var{n}.

El algoritmo de simulación está basado en el método inverso.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@node Funciones y variables para distribuciones discretas,  , Funciones y variables para distribuciones continuas, distrib
@section Funciones y variables para distribuciones discretas



@deffn {Función} pdf_general_finite_discrete (@var{x},@var{v})
Devuelve el valor correspondiente a @var{x} de la función de densidad de una variable aleatoria general discreta finita, con vector de probabilidades @math{v}, tal que @code{Pr(X=i) = v_i}. El vector @math{v} puede ser una lista de expresiones no negativas, cuyas componentes se normalizarán para obtener un vector de probabilidades. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.

@c ===beg===
@c load (distrib)$
@c pdf_general_finite_discrete(2, [1/7, 4/7, 2/7]);
@c pdf_general_finite_discrete(2, [1, 4, 2]);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) pdf_general_finite_discrete(2, [1/7, 4/7, 2/7]);
                                4
(%o2)                           -
                                7
(%i3) pdf_general_finite_discrete(2, [1, 4, 2]);
                                4
(%o3)                           -
                                7
@end example
@end deffn


@deffn {Función} cdf_general_finite_discrete (@var{x},@var{v})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria general discreta finita, con vector de probabilidades @math{v}.

Véase @code{pdf_general_finite_discrete} para más detalles.

@c ===beg===
@c load (distrib)$
@c cdf_general_finite_discrete(2, [1/7, 4/7, 2/7]);
@c cdf_general_finite_discrete(2, [1, 4, 2]);
@c cdf_general_finite_discrete(2+1/2, [1, 4, 2]);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_general_finite_discrete(2, [1/7, 4/7, 2/7]);
                                5
(%o2)                           -
                                7
(%i3) cdf_general_finite_discrete(2, [1, 4, 2]);
                                5
(%o3)                           -
                                7
(%i4) cdf_general_finite_discrete(2+1/2, [1, 4, 2]);
                                5
(%o4)                           -
                                7
@end example
@end deffn


@deffn {Función} quantile_general_finite_discrete (@var{q},@var{v})
Devuelve el @var{q}-cuantil de una variable aleatoria general discreta finita, con vector de probabilidades @math{v}.

Véase @code{pdf_general_finite_discrete} para más detalles.
@end deffn


@deffn {Función} mean_general_finite_discrete (@var{v})
Devuelve la media de una variable aleatoria general discreta finita, con vector de probabilidades @math{v}.

Véase @code{pdf_general_finite_discrete} para más detalles.
@end deffn


@deffn {Función} var_general_finite_discrete (@var{v})
Devuelve la varianza de una variable aleatoria general discreta finita, con vector de probabilidades @math{v}.

Véase @code{pdf_general_finite_discrete} para más detalles.
@end deffn


@deffn {Función} std_general_finite_discrete (@var{v})
Devuelve la desviación típica de una variable aleatoria general discreta finita, con vector de probabilidades @math{v}.

Véase @code{pdf_general_finite_discrete} para más detalles.
@end deffn


@deffn {Función} skewness_general_finite_discrete (@var{v})
Devuelve el coeficiente de asimetría de una variable aleatoria general discreta finita, con vector de probabilidades @math{v}.

Véase @code{pdf_general_finite_discrete} para más detalles.
@end deffn


@deffn {Función} kurtosis_general_finite_discrete (@var{v})
Devuelve el coeficiente de curtosis de una variable aleatoria general discreta finita, con vector de probabilidades @math{v}.

Véase @code{pdf_general_finite_discrete} para más detalles.
@end deffn


@deffn {Función} random_general_finite_discrete (@var{v})
@deffnx {Función} random_general_finite_discrete (@var{v},@var{m})
Devuelve un valor aleatorio de una variable aleatoria general discreta finita, con vector de probabilidades @math{v}. Llamando a @code{random_general_finite_discrete} con un segundo argumento @var{n}, se simulará una muestra aleatoria de tamaño @var{n}.

Véase @code{pdf_general_finite_discrete} para más detalles.

@c ===beg===
@c load (distrib)$
@c random_general_finite_discrete([1,3,1,5]);
@c random_general_finite_discrete([1,3,1,5], 10);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) random_general_finite_discrete([1,3,1,5]);
(%o2)                          4
(%i3) random_general_finite_discrete([1,3,1,5], 10);
(%o3)           [4, 2, 2, 3, 2, 4, 4, 1, 2, 2]
@end example
@end deffn


@deffn {Función} pdf_binomial (@var{x},@var{n},@var{p})
Devuelve el valor correspondiente a @var{x} de la función de probabilidad de una variable aleatoria @i{Binomial}@math{(n,p)}, con @math{0 \leq p \leq 1} y @math{n} entero positivo. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} cdf_binomial (@var{x},@var{n},@var{p})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria @i{Binomial}@math{(n,p)}, con @math{0 \leq p \leq 1} y @math{n} entero positivo.

@c ===beg===
@c load (distrib)$
@c cdf_binomial(5,7,1/6);
@c float(%);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_binomial(5,7,1/6);
                            7775
(%o2)                       ----
                            7776
(%i3) float(%);
(%o3)               .9998713991769548
@end example
@end deffn


@deffn {Función} quantile_binomial (@var{q},@var{n},@var{p})
Devuelve el @var{q}-cuantil de una variable aleatoria @i{Binomial}@math{(n,p)}, con @math{0 \leq p \leq 1} y @math{n} entero positivo; en otras palabras, se trata de la inversa de  @code{cdf_binomial}. El argumento @var{q} debe ser un número de @math{[0,1]}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} mean_binomial (@var{n},@var{p})
Devuelve la media de  una variable aleatoria @i{Binomial}@math{(n,p)}, con @math{0 \leq p \leq 1} y @math{n} entero positivo. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} var_binomial (@var{n},@var{p})
Devuelve la varianza de  una variable aleatoria @i{Binomial}@math{(n,p)}, con @math{0 \leq p \leq 1} y @math{n} entero positivo. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} std_binomial (@var{n},@var{p})
Devuelve la desviación típica de  una variable aleatoria @i{Binomial}@math{(n,p)}, con @math{0 \leq p \leq 1} y @math{n} entero positivo. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} skewness_binomial (@var{n},@var{p})
Devuelve el coeficiente de asimetría de una variable aleatoria @i{Binomial}@math{(n,p)}, con @math{0 \leq p \leq 1} y @math{n} entero positivo. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} kurtosis_binomial (@var{n},@var{p})
Devuelve el coeficiente de curtosis de una variable aleatoria binomial  @i{Binomial}@math{(n,p)}, con @math{0 \leq p \leq 1} y @math{n} entero positivo. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} random_binomial (@var{n},@var{p})
@deffnx {Función} random_binomial (@var{n},@var{p},@var{m})
Devuelve un valor aleatorio  @i{Binomial}@math{(n,p)}, con @math{0 \leq p \leq 1} y @math{n} entero positivo. Llamando a  @code{random_binomial} con un tercer argumento @var{m}, se simulará una muestra aleatoria de tamaño  @var{m}.

El algoritmo de simulación es el descrito en Kachitvichyanukul, V. y Schmeiser, B.W. (1988) @var{Binomial Random Variate Generation}. Communications of the ACM, 31, Feb., 216.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} pdf_poisson (@var{x},@var{m})
Devuelve el valor correspondiente a @var{x} de la función de probabilidad de una variable aleatoria de @i{Poisson}@math{(m)}, con @math{m>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} cdf_poisson (@var{x},@var{m})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria de @i{Poisson}@math{(m)}, con @math{m>0}.

@c ===beg===
@c load (distrib)$
@c cdf_poisson(3,5);
@c float(%);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_poisson(3,5);
(%o2)       gamma_incomplete_regularized(4, 5)
(%i3) float(%);
(%o3)               .2650259152973623
@end example
@end deffn


@deffn {Función} quantile_poisson (@var{q},@var{m})
Devuelve el @var{q}-cuantil de una variable aleatoria de @i{Poisson}@math{(m)}, con @math{m>0}; en otras palabras, se trata de la inversa de  @code{cdf_poisson}. El argumento @var{q} debe ser un número de @math{[0,1]}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} mean_poisson (@var{m})
Devuelve la media de una variable aleatoria de @i{Poisson}@math{(m)}, con  @math{m>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} var_poisson (@var{m})
Devuelve la varianza de  una variable aleatoria de @i{Poisson}@math{(m)}, con  @math{m>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} std_poisson (@var{m})
Devuelve la desviación típica de  una variable aleatoria de @i{Poisson}@math{(m)}, con @math{m>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} skewness_poisson (@var{m})
Devuelve el coeficiente de asimetría de una variable aleatoria de @i{Poisson}@math{(m)}, con @math{m>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} kurtosis_poisson (@var{m})
Devuelve el coeficiente de curtosis de una variable aleatoria de @i{Poisson}@math{(m)}, con @math{m>0}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} random_poisson (@var{m})
@deffnx {Función} random_poisson (@var{m},@var{n})
Devuelve un valor aleatorio  @i{Poisson}@math{(m)}, con @math{m>0}. Llamando a  @code{random_poisson} con un segundo argumento @var{n}, se simulará una muestra aleatoria de tamaño  @var{n}.

El algoritmo de simulación es el descrito en Ahrens, J.H. and Dieter, U. (1982) @var{Computer Generation of Poisson Deviates From Modified Normal Distributions}. ACM Trans. Math. Software, 8, 2, June,163-179.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} pdf_bernoulli (@var{x},@var{p})
Devuelve el valor correspondiente a @var{x} de la función de probabilidad de una variable aleatoria de @i{Bernoulli}@math{(p)}, con @math{0 \leq p \leq 1}.

La variable aleatoria @i{Bernoulli}@math{(p)} equivale a una @i{Binomial}@math{(1,p)}.

@c ===beg===
@c load (distrib)$
@c pdf_bernoulli(1,p);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) pdf_bernoulli(1,p);
(%o2)                           p
@end example
@end deffn


@deffn {Función} cdf_bernoulli (@var{x},@var{p})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria de @i{Bernoulli}@math{(p)}, con @math{0 \leq p \leq 1}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} quantile_bernoulli (@var{q},@var{p})
Devuelve el @var{q}-cuantil de una variable aleatoria de @i{Bernoulli}@math{(p)}, con @math{0 \leq p \leq 1}; en otras palabras, se trata de la inversa de  @code{cdf_bernoulli}. El argumento @var{q} debe ser un número de @math{[0,1]}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} mean_bernoulli (@var{p})
Devuelve la media de  una variable aleatoria de @i{Bernoulli}@math{(p)}, con @math{0 \leq p \leq 1}.

La variable aleatoria @i{Bernoulli}@math{(p)} equivale a una @i{Binomial}@math{(1,p)}.

@c ===beg===
@c load (distrib)$
@c mean_bernoulli(p);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) mean_bernoulli(p);
(%o2)                           p
@end example
@end deffn


@deffn {Función} var_bernoulli (@var{p})
Devuelve la varianza de  una variable aleatoria de @i{Bernoulli}@math{(p)}, con @math{0 \leq p \leq 1}.

La variable aleatoria @i{Bernoulli}@math{(p)} equivale a una @i{Binomial}@math{(1,p)}.

@c ===beg===
@c load (distrib)$
@c var_bernoulli(p);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) var_bernoulli(p);
(%o2)                       (1 - p) p
@end example
@end deffn


@deffn {Función} std_bernoulli (@var{p})
Devuelve la desviación típica de  una variable aleatoria de @i{Bernoulli}@math{(p)}, con @math{0 \leq p \leq 1}.

La variable aleatoria @i{Bernoulli}@math{(p)} equivale a una @i{Binomial}@math{(1,p)}.

@c ===beg===
@c load (distrib)$
@c std_bernoulli(p);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) std_bernoulli(p);
(%o2)                           sqrt((1 - p) p)
@end example
@end deffn


@deffn {Función} skewness_bernoulli (@var{p})
Devuelve el coeficiente de asimetría de una variable aleatoria de @i{Bernoulli}@math{(p)}, con @math{0 \leq p \leq 1}.

La variable aleatoria @i{Bernoulli}@math{(p)} equivale a una @i{Binomial}@math{(1,p)}.

@c ===beg===
@c load (distrib)$
@c skewness_bernoulli(p);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) skewness_bernoulli(p);
                                    1 - 2 p
(%o2)                           ---------------
                                sqrt((1 - p) p)
@end example
@end deffn


@deffn {Función} kurtosis_bernoulli (@var{p})
Devuelve el coeficiente de curtosis una variable aleatoria de @i{Bernoulli}@math{(p)}, con @math{0 \leq p \leq 1}.

La variable aleatoria @i{Bernoulli}@math{(p)} equivale a una @i{Binomial}@math{(1,p)}.

@c ===beg===
@c load (distrib)$
@c kurtosis_bernoulli(p);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) kurtosis_bernoulli(p);
                         1 - 6 (1 - p) p
(%o2)                    ---------------
                            (1 - p) p
@end example
@end deffn


@deffn {Función} random_bernoulli (@var{p})
@deffnx {Función} random_bernoulli (@var{p},@var{n})
Devuelve un valor aleatorio  @i{Bernoulli}@math{(p)}, con @math{0 \leq p \leq 1}. Llamando a  @code{random_bernoulli} con un segundo argumento @var{n}, se simulará una muestra aleatoria de tamaño  @var{n}.

Es aplicación directa de la función @code{random} de Maxima.

Véase también @code{random}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} pdf_geometric (@var{x},@var{p})
Devuelve el valor correspondiente a @var{x} de la función de probabilidad de una variable aleatoria @i{Geométrica}@math{(p)}, con @math{0 < p \leq 1}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} cdf_geometric (@var{x},@var{p})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria @i{Geométrica}@math{(p)}, con @math{0 < p \leq 1}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} quantile_geometric (@var{q},@var{p})
Devuelve el @var{q}-cuantil de una variable aleatoria @i{Geométrica}@math{(p)}, con @math{0 < p \leq 1}; en otras palabras, se trata de la inversa de  @code{cdf_geometric}. El argumento @var{q} debe ser un número de @math{[0,1]}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} mean_geometric (@var{p})
Devuelve la media de  una variable aleatoria @i{Geométrica}@math{(p)}, con @math{0 < p \leq 1}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} var_geometric (@var{p})
Devuelve la varianza de  una variable aleatoria @i{Geométrica}@math{(p)}, con @math{0 < p \leq 1}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} std_geometric (@var{p})
Devuelve la desviación típica de  una variable aleatoria @i{Geométrica}@math{(p)}, con @math{0 < p \leq 1}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} skewness_geometric (@var{p})
Devuelve el coeficiente de asimetría de una variable aleatoria @i{Geométrica}@math{(p)}, con @math{0 < p \leq 1}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} kurtosis_geometric (@var{p})
Devuelve el coeficiente de curtosis de una variable aleatoria @i{Geométrica}@math{(p)}, con @math{0 < p \leq 1}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} random_geometric (@var{p})
@deffnx {Función} random_geometric (@var{p},@var{n})
Devuelve un valor aleatorio @i{Geométrico}@math{(p)}, con @math{0 < p \leq 1}. Llamando a  @code{random_geometric} con un segundo argumento @var{n}, se simulará una muestra aleatoria de tamaño  @var{n}.

El algoritmo está basado en la simulación de ensayos de Bernoulli.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} pdf_discrete_uniform (@var{x},@var{n})
Devuelve el valor correspondiente a @var{x} de la función de probabilidad de una variable aleatoria @i{Uniforme Discreta}@math{(n)}, con @math{n} entero positivo. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} cdf_discrete_uniform (@var{x},@var{n})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria @i{Uniforme Discreta}@math{(n)}, con @math{n} entero positivo. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} quantile_discrete_uniform (@var{q},@var{n})
Devuelve el @var{q}-cuantil de una variable aleatoria @i{Uniforme Discreta}@math{(n)}, con @math{n} entero positivo; en otras palabras, se trata de la inversa de  @code{cdf_discrete_uniform}. El argumento @var{q} debe ser un número de @math{[0,1]}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} mean_discrete_uniform (@var{n})
Devuelve la media de  una variable aleatoria @i{Uniforme Discreta}@math{(n)}, con @math{n} entero positivo. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} var_discrete_uniform (@var{n})
Devuelve la varianza de  una variable aleatoria @i{Uniforme Discreta}@math{(n)}, con @math{n} entero positivo. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} std_discrete_uniform (@var{n})
Devuelve la desviación típica de  una variable aleatoria @i{Uniforme Discreta}@math{(n)}, con @math{n} entero positivo. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} skewness_discrete_uniform (@var{n})
Devuelve el coeficiente de asimetría de una variable aleatoria @i{Uniforme Discreta}@math{(n)}, con @math{n} entero positivo. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} kurtosis_discrete_uniform (@var{n})
Devuelve el coeficiente de curtosis de una variable aleatoria @i{Uniforme Discreta}@math{(n)}, con @math{n} entero positivo. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} random_discrete_uniform (@var{n})
@deffnx {Función} random_discrete_uniform (@var{n},@var{m})
Devuelve un valor aleatorio  @math{Uniforme Discreto(n)}, con @math{n} entero positivo. Llamando a  @code{random_discrete_uniform} con un segundo argumento @var{m}, se simulará una muestra aleatoria de tamaño  @var{m}.

Se trata de una aplicación directa de la función @code{random} de Maxima.

Véase también @code{random}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} pdf_hypergeometric (@var{x},@var{n1},@var{n2},@var{n})
Devuelve el valor correspondiente a @var{x} de la función de probabilidad de una 
variable aleatoria @i{Hipergeométrica}@math{(n1,n2,n)}, con @var{n1}, @var{n2} y @var{n} 
enteros positivos y @math{n<=n1+n2}. Siendo @var{n1} el número de objetos de la clase A, 
@var{n2} el número de objetos de la clase B y @var{n} el tamaño de una muestra sin 
reemplazo, esta función devuelve la probabilidad del suceso 
"extraer exactamente @var{x} objetos de la clase A".

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} cdf_hypergeometric (@var{x},@var{n1},@var{n2},@var{n})
Devuelve el valor correspondiente a @var{x} de la función de distribución of una variable 
aleatoria @i{Hipergeométrica}@math{(n1,n2,n)}, con @var{n1}, @var{n2} y @var{n} enteros 
positivos y @math{n<=n1+n2}. Véase @code{pdf_hypergeometric} para una descripción más completa.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} quantile_hypergeometric (@var{q},@var{n1},@var{n2},@var{n})
Devuelve el @var{q}-cuantil de una variable aleatoria @i{Hipergeométrica}@math{(n1,n2,n)}, con @var{n1}, @var{n2} y @var{n} enteros positivos y @math{n<=n1+n2}; en otras palabras, se trata de la inversa de  @code{cdf_hypergeometric}. El argumento @var{q} debe ser un número de @math{[0,1]}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} mean_hypergeometric (@var{n1},@var{n2},@var{n})
Devuelve la media de  una variable aleatoria uniforme discreta @math{Hyp(n1,n2,n)}, con @var{n1}, @var{n2} y @var{n} enteros positivos y @math{n<=n1+n2}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} var_hypergeometric (@var{n1},@var{n2},@var{n})
Devuelve la varianza de  una variable aleatoria @i{Hipergeométrica}@math{(n1,n2,n)}, con @var{n1}, @var{n2} y @var{n} enteros positivos y @math{n<=n1+n2}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} std_hypergeometric (@var{n1},@var{n2},@var{n})
Devuelve la desviación típica de  una variable aleatoria @i{Hipergeométrica}@math{(n1,n2,n)}, con @var{n1}, @var{n2} y @var{n} enteros positivos y @math{n<=n1+n2}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} skewness_hypergeometric (@var{n1},@var{n2},@var{n})
Devuelve el coeficiente de asimetría de una variable aleatoria @i{Hipergeométrica}@math{(n1,n2,n)}, con @var{n1}, @var{n2} y @var{n} enteros positivos y @math{n<=n1+n2}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} random_hypergeometric (@var{n1},@var{n2},@var{n})
@deffnx {Función} random_hypergeometric (@var{n1},@var{n2},@var{n},@var{m})
Devuelve un valor aleatorio @i{Hipergeométrico}@math{(n1,n2,n)}, con @var{n1}, @var{n2} y @var{n} enteros positivos y @math{n<=n1+n2}. Llamando a  @code{random_hypergeometric} con un cuarto argumento @var{m}, se simulará una muestra aleatoria de tamaño  @var{m}.

Algoritmo descrito en Kachitvichyanukul, V., Schmeiser, B.W. (1985) @var{Computer generation of hypergeometric random variates.} Journal of Statistical Computation and Simulation 22, 127-145.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} pdf_negative_binomial (@var{x},@var{n},@var{p})
Devuelve el valor correspondiente a @var{x} de la función de probabilidad de una variable aleatoria @i{Binomial Negativa}@math{(n,p)}, con @math{0 < p \leq 1} y @math{n} positivo. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} cdf_negative_binomial (@var{x},@var{n},@var{p})
Devuelve el valor correspondiente a @var{x} de la función de distribución de una variable aleatoria @i{Binomial Negativa}@math{(n,p)}, con @math{0 < p \leq 1} y @math{n} positivo.

@c ===beg===
@c load (distrib)$
@c cdf_negative_binomial(3,4,1/8);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_negative_binomial(3,4,1/8);
                            3271
(%o2)                      ------
                           524288
@end example
@end deffn


@deffn {Función} quantile_negative_binomial (@var{q},@var{n},@var{p})
Devuelve el @var{q}-cuantil de una variable aleatoria @i{Binomial Negativa}@math{(n,p)}, con @math{0 < p \leq 1} y @math{n} positivo; en otras palabras, se trata de la inversa de  @code{cdf_negative_binomial}. El argumento @var{q} debe ser un número de @math{[0,1]}. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} mean_negative_binomial (@var{n},@var{p})
Devuelve la media de  una variable aleatoria @i{Binomial Negativa}@math{(n,p)}, con @math{0 < p \leq 1} and @math{n} positivo. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} var_negative_binomial (@var{n},@var{p})
Devuelve la varianza de  una variable aleatoria @i{Binomial Negativa}@math{(n,p)}, con @math{0 < p \leq 1} and @math{n} positivo. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} std_negative_binomial (@var{n},@var{p})
Devuelve la desviación típica de  una variable aleatoria @i{Binomial Negativa}@math{(n,p)}, con @math{0 < p \leq 1} and @math{n} positivo. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} skewness_negative_binomial (@var{n},@var{p})
Devuelve el coeficiente de asimetría de una variable aleatoria @i{Binomial Negativa}@math{(n,p)}, con @math{0 < p \leq 1} and @math{n} positivo. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} kurtosis_negative_binomial (@var{n},@var{p})
Devuelve el coeficiente de curtosis una variable aleatoria binomial negativa  @math{NB(n,p)}, con @math{0 < p \leq 1} and @math{n} positivo. Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


@deffn {Función} random_negative_binomial (@var{n},@var{p})
@deffnx {Función} random_negative_binomial (@var{n},@var{p},@var{m})
Devuelve un valor aleatorio @i{Binomial Negativo}@math{(n,p)}, con @math{0 < p \leq 1} y @math{n} positivo. Llamando a  @code{random_negative_binomial} con un tercer argumento @var{m}, se simulará una muestra aleatoria de tamaño  @var{m}.

Algoritmo descrito en Devroye, L. (1986) @var{Non-Uniform Random Variate Generation}. Springer Verlag, p. 480.

Para hacer uso de esta función, ejecútese primero @code{load(distrib)}.
@end deffn


