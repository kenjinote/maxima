@c /romberg.texi/1.1/Mon Jan  8 01:45:16 2007//
@menu
* Definições para romberg::
@end menu

@node Definições para romberg, , Top, Top
@section Definições para romberg

@deffn {Função} romberg (@var{expr}, @var{x}, @var{a}, @var{b})
@deffnx {Função} romberg (@var{F}, @var{a}, @var{b})

Calcula uma integração numérica pelo método de Romberg.

@code{romberg(@var{expr}, @var{x}, @var{a}, @var{b})}
retorna uma estimativa da integral @code{integrate(@var{expr}, @var{x}, @var{a}, @var{b})}.
@var{expr} deve ser uma expressão que avalie para um valor em ponto flutuante
quando @var{x} estiver associado a um valor em ponto flutuante.

@code{romberg(@var{F}, @var{a}, @var{b})}
retorna uma estimativa da integral @code{integrate(@var{F}(x), x, @var{a}, @var{b})}
onde @code{x} representa o não nomeado, isolado argumeno de @var{F};
o actual argumento não é chamado @code{x}.
@var{F} deve ser uma função do Maxima ou do Lisp que retorne um valor em ponto flutuante
quando o argumento for um número em ponto flutuante.
@var{F} pode nomear uma função traduzida ou compilada do Maxima.

A precisão de @code{romberg} é governada pelas variáveis globais
@code{rombergabs} e @code{rombergtol}.
@code{romberg} termina com sucesso quando
a diferença absoluta entre duas aproximações sucessivas for menor que @code{rombergabs},
ou a diferença relativa em aproximações sucessivas for menor que @code{rombergtol}.
Dessa forma quando @code{rombergabs} for 0.0 (o padrão)
somente o erro relativo tem algum efeito sobre @code{romberg}.

@code{romberg} divide ao meio o tamanho do passo no máximo @code{rombergit} vezes antes de interromper;
o número máximo de avaliações de função é portanto @code{2^rombergit}.
Se o critério de erro estabelecido por @code{rombergabs} e por @code{rombergtol}
não for satisfeito, @code{romberg} mostra uma mensagem de erro.
@code{romberg} sempre faz ao menos @code{rombergmin} iterações;
isso é uma intenção eurísstica de previnir encerramentos espúrios quando o integrando for oscilatório.

@code{romberg} repetidamente avalia o integrando após associar a variável
de integração a um valor específico (e não antes).
Essa política de avaliação torna possível aninhar chamadas a @code{romberg},
para calcular integrais multidimensionais.
Todavia, os cálculos de erro não tomam os erros de integrações aninhadas
em consideração, então erros podem ser subestimados.
Também, métodos imaginados especialmente para problemas multidimensionais podem retornar
a mesma precisão com poucas avaliações de função.

@code{load(romberg)} torna essa função disponível para uso.

Veja também @code{QUADPACK}, uma colecção de funções de integração numérica.

Exemplos:

Uma integração unidimensonal.
@c ===beg===
@c load (romberg);
@c f(x) := 1/((x - 1)^2 + 1/100) + 1/((x - 2)^2 + 1/1000) + 1/((x - 3)^2 + 1/200);
@c rombergtol : 1e-6;
@c rombergit : 15;
@c estimate : romberg (f(x), x, -5, 5);
@c exact : integrate (f(x), x, -5, 5);
@c abs (estimate - exact) / exact, numer;
@c ===end===

@example
(%i1) load (romberg);
(%o1)    /usr/share/maxima/5.11.0/share/numeric/romberg.lisp
(%i2) f(x) := 1/((x - 1)^2 + 1/100) + 1/((x - 2)^2 + 1/1000) + 1/((x - 3)^2 + 1/200);
                    1                 1                1
(%o2) f(x) := -------------- + --------------- + --------------
                     2    1           2    1            2    1
              (x - 1)  + ---   (x - 2)  + ----   (x - 3)  + ---
                         100              1000              200
(%i3) rombergtol : 1e-6;
(%o3)                 9.9999999999999995E-7
(%i4) rombergit : 15;
(%o4)                          15
(%i5) estimate : romberg (f(x), x, -5, 5);
(%o5)                   173.6730736617464
(%i6) exact : integrate (f(x), x, -5, 5);
(%o6) 10 sqrt(10) atan(70 sqrt(10))
 + 10 sqrt(10) atan(30 sqrt(10)) + 10 sqrt(2) atan(80 sqrt(2))
 + 10 sqrt(2) atan(20 sqrt(2)) + 10 atan(60) + 10 atan(40)
(%i7) abs (estimate - exact) / exact, numer;
(%o7)                7.5527060865060088E-11
@end example

Uma integração bidimensional, implementada com chamadas aninhadas a @code{romberg}.
@c ===beg===
@c load (romberg);
@c g(x, y) := x*y / (x + y);
@c rombergtol : 1e-6;
@c estimate : romberg (romberg (g(x, y), y, 0, x/2), x, 1, 3);
@c assume (x > 0);
@c integrate (integrate (g(x, y), y, 0, x/2), x, 1, 3);
@c exact : radcan (%);
@c abs (estimate - exact) / exact, numer;
@c ===end===

@example
(%i1) load (romberg);
(%o1)    /usr/share/maxima/5.11.0/share/numeric/romberg.lisp
(%i2) g(x, y) := x*y / (x + y);
                                    x y
(%o2)                   g(x, y) := -----
                                   x + y
(%i3) rombergtol : 1e-6;
(%o3)                 9.9999999999999995E-7
(%i4) estimate : romberg (romberg (g(x, y), y, 0, x/2), x, 1, 3);
(%o4)                   0.81930239628356
(%i5) assume (x > 0);
(%o5)                        [x > 0]
(%i6) integrate (integrate (g(x, y), y, 0, x/2), x, 1, 3);
                                          3
                                    2 log(-) - 1
                    9                     2        9
(%o6)       - 9 log(-) + 9 log(3) + ------------ + -
                    2                    6         2
(%i7) exact : radcan (%);
                    26 log(3) - 26 log(2) - 13
(%o7)             - --------------------------
                                3
(%i8) abs (estimate - exact) / exact, numer;
(%o8)                1.3711979871851024E-10
@end example

@end deffn

@defvr {Variável de opção} rombergabs
Valor por omissão: 0.0

A precisão de @code{romberg} é governada pelas variávies globais
@code{rombergabs} e @code{rombergtol}.
@code{romberg} termina com sucesso quando
a diferença absoluta entre duas aproximações sucessivas for menor que @code{rombergabs},
ou a diferença relativa em aproximações sucessivas for menor que @code{rombergtol}.
Dessa forma quando @code{rombergabs} for 0.0 (o padrão)
somente o erro relativo tem algum efeito sobre @code{romberg}.

Veja também @code{rombergit} e @code{rombergmin}.

@end defvr

@defvr {Variável de opção} rombergit
Valor por omissão: 11

@code{romberg} divide ao meio o tamanho do passo no máximo @code{rombergit} vezes antes de interromper;
o número máximo de avaliações de função é portanto @code{2^rombergit}.
Se o critério de erro estabelecido por @code{rombergabs} e por @code{rombergtol}
não for satisfeito, @code{romberg} mostra uma mensagem de erro.
@code{romberg} sempre faz ao menos @code{rombergmin} iterações;
isso é uma intenção eurísstica de previnir encerramentos espúrios quando o integrando for oscilatório.

Veja também @code{rombergabs} e @code{rombergtol}.

@end defvr

@defvr {Variável de opção} rombergmin
Valor por omissão: 0

@code{romberg} sempre faz ao menos @code{rombergmin} iterações;
isso é uma intenção eurísstica para prevenir terminações espúrias quando o integrando for.

Veja também @code{rombergit}, @code{rombergabs}, e @code{rombergtol}.

@end defvr

@defvr {Variável de opção} rombergtol
Valor por omissão: 1e-4

A precisão de @code{romberg} é governada pelas variáveis globais
@code{rombergabs} e @code{rombergtol}.
@code{romberg} termina com sucesso quando
a diferença absoluta entre duas aproximações sucessivas for menor que @code{rombergabs},
ou a diferença relativa em aproximações sucessivas for menor que @code{rombergtol}.
Dessa forma quando @code{rombergabs} for 0.0 (o padrão)
somente o erro relativo tem algum efeito sobre @code{romberg}.

Veja também @code{rombergit} e @code{rombergmin}.

@end defvr


