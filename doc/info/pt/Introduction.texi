O Maxima inicia-se executando alguma das suas interfaces gráficas ou
numa consola, com o comando "maxima". No início Maxima mostra informação
do número de versão e uma linha de entrada de comando, identificada por
@code{(%i1)} (entrada número 1). Cada comando deve terminar-se com ponto
e vírgula ``@kbd{;}'', para que seja executado e apareça a resposta, ou
com ``@kbd{$}'', para que seja executado sem aparecer a resposta. Para
terminar a sessão usa-se o comando ``@code{quit}();''. Normalmente, as
teclas @kbd{Ctrl-d} (Ctrl e d em simultâneo) servem como atalho para
terminar a sessão. Eis um exemplo de uma sessão no Maxima:

@example
@group
$ maxima
Maxima 5.34.1 http://maxima.sourceforge.net
using Lisp SBCL 1.1.14.debian
Distributed under the GNU Public License. See the file COPYING.
Dedicated to the memory of William Schelter.
The function bug_report() provides bug reporting information.
@end group
@group

(%i1) factor (10!);
                             8  4  2
(%o1)                       2  3  5  7
@end group
@group
(%i2) expand ((x + y)^6);
       6        5       2  4       3  3       4  2      5      6
(%o2) y  + 6 x y  + 15 x  y  + 20 x  y  + 15 x  y  + 6 x  y + x
@end group
@group
(%i3) factor (x^6 - 1);
                               2            2
(%o3)        (x - 1) (x + 1) (x  - x + 1) (x  + x + 1)
@end group
(%i4) quit();
$
@end example

Maxima pode procurar informação nas páginas do manual. Usa-se o comando
@kbd{describe} para mostrar todas as funções e variáveis relacionadas
com o termo de pesquisa e opcionalmente a sua documentação. O símbolo de
interrogação @kbd{?} é uma abreviatura para @code{describe}:

@example
(%i1) ?? integer
 0: askinteger  (Functions and Variables for Facts)
 1: askinteger <1>  (Functions and Variables for Facts)
 2: askinteger <2>  (Functions and Variables for Facts)
 3: askinteger <3>  (Functions and Variables for Facts)
 4: beta_args_sum_to_integer  (Gamma and factorial Functions)
 5: integer  (Functions and Variables for Properties)
 6: integer_partitions  (Functions and Variables for Sets)
 7: integer_partitions <1>  (Functions and Variables for Sets)
 8: integerp  (Functions and Variables for Numbers)
 9: integervalued  (Functions and Variables for Properties)
 10: noninteger  (Functions and Variables for Properties)
 11: nonnegintegerp  (Functions and Variables for Numbers)
@group
Enter space-separated numbers, `all' or `none': 0

 -- Function: askinteger (<expr>, integer)
 -- Function: askinteger (<expr>)
 -- Function: askinteger (<expr>, even)
 -- Function: askinteger (<expr>, odd)

     'askinteger (<expr>, integer)' attempts to determine from the
     'assume' database whether <expr> is an integer.  'askinteger'
     prompts the user if it cannot tell otherwise, and attempt to
     install the information in the database if possible.  'askinteger
     (<expr>)' is equivalent to 'askinteger (<expr>, integer)'.

     'askinteger (<expr>, even)' and 'askinteger (<expr>, odd)' likewise
     attempt to determine if <expr> is an even integer or odd integer,
     respectively.

(%o1)                    true
@end group
@end example

Para usar um resultado em cálculos posteriores, pode atribuir-se esse
valor a uma variável ou usar-se a etiqueta @code{%o}@var{n}, onde
@var{n} é o número da saída. Adicionalmente, @kbd{%} refere-se sempre
ao resultado mais recente:

@c ===beg===
@c u: expand ((x + y)^6);
@c diff (u, x);
@c factor (%o2);
@c ===end===
@example
@group
(%i1) u: expand ((x + y)^6);
       6        5       2  4       3  3       4  2      5      6
(%o1) y  + 6 x y  + 15 x  y  + 20 x  y  + 15 x  y  + 6 x  y + x
@end group
@group
(%i2) diff (u, x);
          5         4       2  3       3  2       4        5
(%o2)  6 y  + 30 x y  + 60 x  y  + 60 x  y  + 30 x  y + 6 x
@end group
@group
(%i3) factor (%o2);
                                     5
(%o3)                       6 (y + x)
@end group
@end example

Maxima tem conhecimento sobre números complexos e constantes numéricas:

@c ===beg===
@c cos(%pi);
@c exp(%i*%pi);
@c ===end===
@example
@group
(%i1) cos(%pi);
(%o1)                           - 1
@end group
@group
(%i2) exp(%i*%pi);
(%o2)                           - 1
@end group
@end example

Maxima pode fazer contas de cálculo diferencial e integral:

@c ===beg===
@c u: expand ((x + y)^6);
@c diff (%, x);
@c integrate (1/(1 + x^3), x);
@c ===end===
@example
@group
(%i1) u: expand ((x + y)^6);
       6        5       2  4       3  3       4  2      5      6
(%o1) y  + 6 x y  + 15 x  y  + 20 x  y  + 15 x  y  + 6 x  y + x
@end group
@group
(%i2) diff (%, x);
          5         4       2  3       3  2       4        5
(%o2)  6 y  + 30 x y  + 60 x  y  + 60 x  y  + 30 x  y + 6 x
@end group
@group
(%i3) integrate (1/(1 + x^3), x);
                                   2 x - 1
                 2            atan(-------)
            log(x  - x + 1)        sqrt(3)    log(x + 1)
(%o3)     - --------------- + ------------- + ----------
                   6             sqrt(3)          3
@end group
@end example

Maxima pode resolver sistemas lineares de equações e equações cúbicas:

@c ===beg===
@c linsolve ([3*x + 4*y = 7, 2*x + a*y = 13], [x, y]);
@c solve (x^3 - 3*x^2 + 5*x = 15, x);
@c ===end===
@example
@group
(%i1) linsolve ([3*x + 4*y = 7, 2*x + a*y = 13], [x, y]);
                         7 a - 52        25
(%o1)               [x = --------, y = -------]
                         3 a - 8       3 a - 8
@end group
@group
(%i2) solve (x^3 - 3*x^2 + 5*x = 15, x);
(%o2)        [x = - sqrt(5) %i, x = sqrt(5) %i, x = 3]
@end group
@end example

Maxima pode também resolver sistemas de equações não lineares. Note-se
os comandos terminados com @kbd{$}, que não mostram o resultado obtido.

@c ===beg===
@c eq_1: x^2 + 3*x*y + y^2 = 0$
@c eq_2: 3*x + y = 1$
@c solve ([eq_1, eq_2]);
@c ===end===
@example
(%i1) eq_1: x^2 + 3*x*y + y^2 = 0$
(%i2) eq_2: 3*x + y = 1$
@group
(%i3) solve ([eq_1, eq_2]);
              3 sqrt(5) + 7      sqrt(5) + 3
(%o3) [[y = - -------------, x = -----------], 
                    2                 2
                                 3 sqrt(5) - 7        sqrt(5) - 3
                            [y = -------------, x = - -----------]]
                                       2                   2
@end group
@end example

Maxima pode gerar gráficos de uma ou mais funções:

@example
(%i1) plot2d (sin(x)/x, [x, -20, 20])$
@end example
@figure{introduction1}
@example
(%i2) plot2d ([atan(x), erf(x), tanh(x)], [x, -5, 5], [y, -1.5, 2])$
@end example
@figure{introduction2}
@example
@group
(%i3) plot3d (sin(sqrt(x^2 + y^2))/sqrt(x^2 + y^2), 
         [x, -12, 12], [y, -12, 12])$
@end group
@end example
@figure{introduction3}

@c FOLLOWING TEXT DESCRIBES THE TCL/TK PLOT WINDOW WHICH IS NO LONGER THE DEFAULT
@c Moving the cursor to the top left corner of the plot window will pop up
@c a menu that will, among other things, let you generate a PostScript file
@c of the plot.  (By default, the file is placed in your home directory.)
@c You can rotate a 3D plot.


