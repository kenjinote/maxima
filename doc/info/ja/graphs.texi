@menu
* Introduction to graphs::
* Functions and Variables for graphs::
@end menu

@node Introduction to graphs, Functions and Variables for graphs, graphs, graphs
@section Introduction to graphs

@code{graphs}パッケージはMaximaにグラフと有向グラフデータ構造を提供します。
有向グラフは@var{u}から@var{v}への有向辺と@var{v}から@var{u}への有向辺を持つことができますが、グラフや有向グラフは単純です(多重辺もループも持ちません)。

内部的にはグラフは隣接リストで表現され、
lisp構造として実装されます。
頂点はそれらのid(idは整数)で識別されます。
辺/弧は長さ2のリストで表現されます。
グラフ/有向グラフの頂点にラベルを割り当てることができ、
グラフ/有向グラフの辺/弧に重みを割り当てることができます。

グラフを描画するためのの@code{draw_graph}関数があります。
グラフはforce based 頂点配置アルゴリズムを使って描画されます。
@code{draw_graph}は
@url{http://www.graphviz.org}から利用可能なgraphvizプログラムを使うこともできます。
@code{draw_graph}はMaxima @code{draw}パッケージに基づいています。

@code{graphs}パッケージを使うには、
最初に@code{load(graphs)}でロードしてください。

@opencatbox
@category{Share packages}
@category{Package graphs}
@closecatbox

@node Functions and Variables for graphs, , Introduction to graphs, graphs
@section Functions and Variables for graphs

@subsection Building graphs

@deffn {関数} create_graph (@var{v_list}, @var{e_list})
@deffnx {関数} create_graph (@var{n}, @var{e_list})
@deffnx {関数} create_graph (@var{v_list}, @var{e_list}, @var{directed})
頂点の集合@var{v_list}上に辺@var{e_list}を使って新しいグラフを生成します。

@var{v_list}は頂点のリスト(@code{[v1, v2,..., vn]})もしくは
頂点ラベルを持つ頂点のリスト(@code{[[v1,l1], [v2,l2],..., [vn,ln]]})です。

@var{n}は頂点の数です。
頂点は0からn-1までの整数で識別されます。
(訳注: 1から始まるMaximaのリストの添字の慣例とは異なることに注意してください。)

@var{e_list}は辺のリスト(@code{[e1, e2,..., em]})もしくは
辺の重みを持つ辺のリスト(@code{[[e1, w1], ..., [em, wm]]})です。

もし@var{directed}が@code{false}でないなら、
有向グラフが返されます。

例1: 頂点3つの循環を生成する。
@c ===beg===
@c load (graphs)$
@c g : create_graph([1,2,3], [[1,2], [2,3], [1,3]])$
@c print_graph(g)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : create_graph([1,2,3], [[1,2], [2,3], [1,3]])$
(%i3) print_graph(g)$
Graph on 3 vertices with 3 edges.
Adjacencies:
  3 :  1  2
  2 :  3  1
  1 :  3  2
@end example

例2: 辺の重みを持つ頂点3つの循環を生成する。
@c ===beg===
@c load (graphs)$
@c g : create_graph([1,2,3], [[[1,2], 1.0], [[2,3], 2.0],
@c                           [[1,3], 3.0]])$
@c print_graph(g)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : create_graph([1,2,3], [[[1,2], 1.0], [[2,3], 2.0],
                          [[1,3], 3.0]])$
(%i3) print_graph(g)$
Graph on 3 vertices with 3 edges.
Adjacencies:
  3 :  1  2
  2 :  3  1
  1 :  3  2
@end example

例3: 有向グラフを生成する:
@c ===beg===
@c load (graphs)$
@c d : create_graph(
@c         [1,2,3,4], 
@c         [
@c          [1,3], [1,4],
@c          [2,3], [2,4]
@c         ],
@c         'directed = true)$
@c print_graph(d)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) d : create_graph(
        [1,2,3,4],
        [
         [1,3], [1,4],
         [2,3], [2,4]
        ],
        'directed = true)$
(%i3) print_graph(d)$
Digraph on 4 vertices with 4 arcs.
Adjacencies:
  4 :
  3 :
  2 :  4  3
  1 :  4  3
@end example

@opencatbox
@category{Package graphs}
@closecatbox
@end deffn

@deffn {関数} copy_graph (@var{g})
グラフ@var{g}のコピーを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} circulant_graph (@var{n}, @var{d})
パラメータ @var{n}と @var{d}を持つ巡回グラフを返します。

例:
@c ===beg===
@c load (graphs)$
@c g : circulant_graph(10, [1,3])$
@c print_graph(g)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : circulant_graph(10, [1,3])$
(%i3) print_graph(g)$
Graph on 10 vertices with 20 edges.
Adjacencies:
  9 :  2  6  0  8
  8 :  1  5  9  7
  7 :  0  4  8  6
  6 :  9  3  7  5
  5 :  8  2  6  4
  4 :  7  1  5  3
  3 :  6  0  4  2
  2 :  9  5  3  1
  1 :  8  4  2  0
  0 :  7  3  9  1
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} clebsch_graph ()
Clebschグラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} complement_graph (@var{g})
グラフ @var{g}の補グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} complete_bipartite_graph (@var{n}, @var{m})
@var{n+m}この頂点上の完全2部グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} complete_graph (@var{n})
@var{n}この頂点上の完全グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} cycle_digraph (@var{n})
@var{n}個の頂点上の有向グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} cycle_graph (@var{n})
@var{n}この頂点上の閉路を返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} cuboctahedron_graph (@var{n})
立方八面体グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} cube_graph (@var{n})
@var{n}次元立方体を返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} dodecahedron_graph ()
十二面体グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} empty_graph (@var{n})
@var{n}個の頂点上の空グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} flower_snark (@var{n})
@var{4n}個の頂点上の花グラフを返します。

例:
@c ===beg===
@c load (graphs)$
@c f5 : flower_snark(5)$
@c chromatic_index(f5);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) f5 : flower_snark(5)$
(%i3) chromatic_index(f5);
(%o3)                           4
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} from_adjacency_matrix (@var{A})
隣接行列 @var{A}で表現されるグラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} frucht_graph ()
Fruchtグラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} graph_product (@var{g1}, @var{g1})
グラフ @var{g1}と @var{g2}の直積を返します。

例:
@c ===beg===
@c load (graphs)$
@c grid : graph_product(path_graph(3), path_graph(4))$
@c draw_graph(grid)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) grid : graph_product(path_graph(3), path_graph(4))$
(%i3) draw_graph(grid)$
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@ifhtml
@image{@value{figuresfolder}/graphs01,6cm}
@end ifhtml

@deffn {関数} graph_union (@var{g1}, @var{g1})
グラフ@var{g1}と @var{g2}の和を返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} grid_graph (@var{n}, @var{m})
@var{n x m}グリッドを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} great_rhombicosidodecahedron_graph ()
大菱形二十・十二面体グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} great_rhombicuboctahedron_graph ()
大斜方立方八面体グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} grotzch_graph ()
Grotzchグラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} heawood_graph ()
Heawoodグラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} icosahedron_graph ()
二十面体グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} icosidodecahedron_graph ()
二十・十二面体グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} induced_subgraph (@var{V}, @var{g})
グラフ @var{g}の頂点の部分集合 @var{V}上の誘導部分グラフを返します。

例:
@c ===beg===
@c load (graphs)$
@c p : petersen_graph()$
@c V : [0,1,2,3,4]$
@c g : induced_subgraph(V, p)$
@c print_graph(g)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : petersen_graph()$
(%i3) V : [0,1,2,3,4]$
(%i4) g : induced_subgraph(V, p)$
(%i5) print_graph(g)$
Graph on 5 vertices with 5 edges.
Adjacencies:
  4 :  3  0
  3 :  2  4
  2 :  1  3
  1 :  0  2
  0 :  1  4
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} line_graph (@var{g})
グラフ @var{g}の折れ線グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} make_graph (@var{vrt}, @var{f})
@deffnx {関数} make_graph (@var{vrt}, @var{f}, @var{oriented})
述語論理関数 @var{f}を使ってグラフを生成します。

@var{vrt}は頂点か整数のリスト/集合です。
もし @var{vrt}が整数なら、
グラフの頂点は1から @var{vrt}までの整数です。

@var{f}は述語論理関数です。
2つの頂点 @var{a}と @var{b}は
もし @code{f(a,b)=true}なら結合されます。

もし @var{directed}が @var{false}でないなら、
グラフは有向です。

例 1:
@c ===beg===
@c load(graphs)$
@c g : make_graph(powerset({1,2,3,4,5}, 2), disjointp)$
@c is_isomorphic(g, petersen_graph());
@c get_vertex_label(1, g);
@c ===end===
@example
(%i1) load(graphs)$
(%i2) g : make_graph(powerset(@{1,2,3,4,5@}, 2), disjointp)$
(%i3) is_isomorphic(g, petersen_graph());
(%o3)                         true
(%i4) get_vertex_label(1, g);
(%o4)                        @{1, 2@}
@end example

例 2:
@c ===beg===
@c load(graphs)$
@c f(i, j) := is (mod(j, i)=0)$
@c g : make_graph(20, f, directed=true)$
@c out_neighbors(4, g);
@c in_neighbors(18, g);
@c ===end===
@example
(%i1) load(graphs)$
(%i2) f(i, j) := is (mod(j, i)=0)$
(%i3) g : make_graph(20, f, directed=true)$
(%i4) out_neighbors(4, g);
(%o4)                    [8, 12, 16, 20]
(%i5) in_neighbors(18, g);
(%o5)                    [1, 2, 3, 6, 9]
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} mycielski_graph (@var{g})
グラフ @var{g}のMycielskiグラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} new_graph ()
頂点も辺も持たないグラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} path_digraph (@var{n})
@var{n}個の頂点上の有向道を返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} path_graph (@var{n})
@var{n}個の頂点上の道を返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} petersen_graph ()
@deffnx {関数} petersen_graph (@var{n}, @var{d})
Petersenグラフ @var{P_@{n,d@}}を返します。
@var{n}と @var{d}のデフォルト値は
@code{n=5}と @code{d=2}です。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} random_bipartite_graph (@var{a}, @var{b}, @var{p})
@code{a+b}個の頂点上のランダムな2部グラフを返します。
辺それぞれは確率 @var{p}で存在します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} random_digraph (@var{n}, @var{p})
@code{n}個の頂点上のランダムな有向グラフを返します。
弧それぞれは確率 @var{p}で存在します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} random_regular_graph (@var{n})
@deffnx {関数} random_regular_graph (@var{n}, @var{d})
@var{n}個の頂点上の
ランダムな@var{d}正則グラフを返します。
@var{d}のデフォルト値は @code{d=3}です。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} random_graph (@var{n}, @var{p})
@var{n}個の頂点上のランダムグラフを返します。
辺それぞれは確率 @var{p}で存在します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} random_graph1 (@var{n}, @var{m})
@var{n}個の頂点とランダムな @var{m}個の辺上のランダムグラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} random_network (@var{n}, @var{p}, @var{w})
@var{n}個の頂点上のランダムネットワークを返します。
弧それぞれは確率 @var{p}で存在し、
範囲 @code{[0,w]}の中に重みを持ちます。
関数はリスト @code{[network, source, sink]}を返します。

例:
@c ===beg===
@c load (graphs)$
@c [net, s, t] : random_network(50, 0.2, 10.0);
@c max_flow(net, s, t)$
@c first(%);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) [net, s, t] : random_network(50, 0.2, 10.0);
(%o2)                   [DIGRAPH, 50, 51]
(%i3) max_flow(net, s, t)$
(%i4) first(%);
(%o4)                   27.65981397932507
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} random_tournament (@var{n})
@var{n}個の頂点上のランダムなトーナメントを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} random_tree (@var{n})
@var{n}個の頂点上のランダムな木を返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} small_rhombicosidodecahedron_graph ()
斜方二十・十二面体グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} small_rhombicuboctahedron_graph ()
斜方立方八面体グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} snub_cube_graph ()
変形立方体グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} snub_dodecahedron_graph ()
変形十二面体グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} truncated_cube_graph ()
切頂六面体グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} truncated_dodecahedron_graph ()
切頂十二面体グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn


@deffn {関数} truncated_icosahedron_graph ()
切頂二十面体グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn


@deffn {関数} truncated_tetrahedron_graph ()
切頂四面体グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} tutte_graph ()
Tutteグラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} underlying_graph (@var{g})
有向グラフ @var{g}の台グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@deffn {関数} wheel_graph (@var{n})
@var{n+1}個の頂点上の車輪グラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - constructions}
@closecatbox
@end deffn

@subsection Graph properties

@deffn {関数} adjacency_matrix (@var{gr})
グラフ @var{gr}の隣接行列を返します。

例:
@c ===beg===
@c load (graphs)$
@c c5 : cycle_graph(4)$
@c adjacency_matrix(c5);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) c5 : cycle_graph(4)$
(%i3) adjacency_matrix(c5);
                         [ 0  1  0  1 ]
                         [            ]
                         [ 1  0  1  0 ]
(%o3)                    [            ]
                         [ 0  1  0  1 ]
                         [            ]
                         [ 1  0  1  0 ]
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} average_degree (@var{gr})
グラフ @var{gr}に関する平均次数を返します。

例:
@c ===beg===
@c load (graphs)$
@c average_degree(grotzch_graph());
@c ===end===
@example
(%i1) load (graphs)$
(%i2) average_degree(grotzch_graph());
                               40
(%o2)                          --
                               11
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} biconnected_components (@var{gr})
グラフ @var{gr}の2連結成分(の頂点集合)を返します

例:
@c ===beg===
@c load (graphs)$
@c g : create_graph(
@c             [1,2,3,4,5,6,7],
@c             [
@c              [1,2],[2,3],[2,4],[3,4],
@c              [4,5],[5,6],[4,6],[6,7]
@c             ])$
@c biconnected_components(g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : create_graph(
            [1,2,3,4,5,6,7],
            [
             [1,2],[2,3],[2,4],[3,4],
             [4,5],[5,6],[4,6],[6,7]
            ])$
(%i3) biconnected_components(g);
(%o3)        [[6, 7], [4, 5, 6], [1, 2], [2, 3, 4]]
@end example

@ifhtml
@image{@value{figuresfolder}/graphs13,6cm}
@end ifhtml

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} bipartition (@var{gr})
グラフ @var{gr}の頂点の2分割か、もし @var{gr}が2部でないなら空のリストを返します。

例:

@c ===beg===
@c load (graphs)$
@c h : heawood_graph()$
@c [A,B]:bipartition(h);
@c draw_graph(h, show_vertices=A, program=circular)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) h : heawood_graph()$
(%i3) [A,B]:bipartition(h);
(%o3)  [[8, 12, 6, 10, 0, 2, 4], [13, 5, 11, 7, 9, 1, 3]]
(%i4) draw_graph(h, show_vertices=A, program=circular)$
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@ifhtml
@image{@value{figuresfolder}/graphs02,6cm}
@end ifhtml

@deffn {関数} chromatic_index (@var{gr})
グラフ @var{gr}の彩色指数を返します。

例:
@c ===beg===
@c load (graphs)$
@c p : petersen_graph()$
@c chromatic_index(p);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : petersen_graph()$
(%i3) chromatic_index(p);
(%o3)                           4
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} chromatic_number (@var{gr})
グラフ @var{gr}の彩色数を返します。

例:
@c ===beg===
@c load (graphs)$
@c chromatic_number(cycle_graph(5));
@c chromatic_number(cycle_graph(6));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) chromatic_number(cycle_graph(5));
(%o2)                           3
(%i3) chromatic_number(cycle_graph(6));
(%o3)                           2
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} clear_edge_weight (@var{e}, @var{gr})
グラフ @var{gr}の辺  @var{e}の重みを削除します。

例:

@c ===beg===
@c load (graphs)$
@c g : create_graph(3, [[[0,1], 1.5], [[1,2], 1.3]])$
@c get_edge_weight([0,1], g);
@c clear_edge_weight([0,1], g)$
@c get_edge_weight([0,1], g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : create_graph(3, [[[0,1], 1.5], [[1,2], 1.3]])$
(%i3) get_edge_weight([0,1], g);
(%o3)                          1.5
(%i4) clear_edge_weight([0,1], g)$
(%i5) get_edge_weight([0,1], g);
(%o5)                           1
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} clear_vertex_label (@var{v}, @var{gr})
グラフ @var{gr}の頂点 @var{v}のラベルを削除します。

例:
@c ===beg===
@c load (graphs)$
@c g : create_graph([[0,"Zero"], [1, "One"]], [[0,1]])$
@c get_vertex_label(0, g);
@c clear_vertex_label(0, g);
@c get_vertex_label(0, g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : create_graph([[0,"Zero"], [1, "One"]], [[0,1]])$
(%i3) get_vertex_label(0, g);
(%o3)                         Zero
(%i4) clear_vertex_label(0, g);
(%o4)                         done
(%i5) get_vertex_label(0, g);
(%o5)                         false
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} connected_components (@var{gr})
グラフ @var{gr}の連携成分(の頂点集合)を返します。

例:
@c ===beg===
@c load (graphs)$
@c g: graph_union(cycle_graph(5), path_graph(4))$
@c connected_components(g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g: graph_union(cycle_graph(5), path_graph(4))$
(%i3) connected_components(g);
(%o3)            [[1, 2, 3, 4, 0], [8, 7, 6, 5]]
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} diameter (@var{gr})
グラフ @var{gr}の直径を返します。

例:
@c ===beg===
@c load (graphs)$
@c diameter(dodecahedron_graph());
@c ===end===
@example
(%i1) load (graphs)$
(%i2) diameter(dodecahedron_graph());
(%o2)                           5
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} edge_coloring (@var{gr})
グラフ @var{gr}の辺の最適色づけを返します。

関数は彩色指数と@var{gr}の辺の色付けを表すリストを返します。


例:
@c ===beg===
@c load (graphs)$
@c p : petersen_graph()$
@c [ch_index, col] : edge_coloring(p);
@c assoc([0,1], col);
@c assoc([0,5], col);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : petersen_graph()$
(%i3) [ch_index, col] : edge_coloring(p);
(%o3) [4, [[[0, 5], 3], [[5, 7], 1], [[0, 1], 1], [[1, 6], 2], 
[[6, 8], 1], [[1, 2], 3], [[2, 7], 4], [[7, 9], 2], [[2, 3], 2], 
[[3, 8], 3], [[5, 8], 2], [[3, 4], 1], [[4, 9], 4], [[6, 9], 3], 
[[0, 4], 2]]]
(%i4) assoc([0,1], col);
(%o4)                           1
(%i5) assoc([0,5], col);
(%o5)                           3
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} degree_sequence (@var{gr})
グラフ @var{gr}の頂点次数のリストを返します。

例:
@c ===beg===
@c load (graphs)$
@c degree_sequence(random_graph(10, 0.4));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) degree_sequence(random_graph(10, 0.4));
(%o2)            [2, 2, 2, 2, 2, 2, 3, 3, 3, 3]
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} edge_connectivity (@var{gr})
グラフ @var{gr}の辺連結性を返します。

@code{min_edge_cut}も参照してください。

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} edges (@var{gr})
(有向)グラフ @var{gr}の辺(弧)のリストを返します。

例:
@c ===beg===
@c load (graphs)$
@c edges(complete_graph(4));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) edges(complete_graph(4));
(%o2)   [[2, 3], [1, 3], [1, 2], [0, 3], [0, 2], [0, 1]]
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} get_edge_weight (@var{e}, @var{gr})
@deffnx {関数} get_edge_weight (@var{e}, @var{gr}, @var{ifnot})
グラフ @var{gr}の辺 @var{e}の重みを返します。

もし辺に割り当てられた重みがないなら、
関数は1を返します。
もし辺がグラフの中に存在しないなら、
関数はエラーをシグナルするか、オプション引数 @var{ifnot}を返します。

例:
@c ===beg===
@c load (graphs)$
@c c5 : cycle_graph(5)$
@c get_edge_weight([1,2], c5);
@c set_edge_weight([1,2], 2.0, c5);
@c get_edge_weight([1,2], c5);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) c5 : cycle_graph(5)$
(%i3) get_edge_weight([1,2], c5);
(%o3)                           1
(%i4) set_edge_weight([1,2], 2.0, c5);
(%o4)                         done
(%i5) get_edge_weight([1,2], c5);
(%o5)                          2.0
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} get_vertex_label (@var{v}, @var{gr})
グラフ @var{gr}の頂点 @var{v}のラベルを返します。

例:
@c ===beg===
@c load (graphs)$
@c g : create_graph([[0,"Zero"], [1, "One"]], [[0,1]])$
@c get_vertex_label(0, g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : create_graph([[0,"Zero"], [1, "One"]], [[0,1]])$
(%i3) get_vertex_label(0, g);
(%o3)                         Zero
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} graph_charpoly (@var{gr}, @var{x})
グラフ @var{gr}の(変数 @var{x}に関する)特性多項式を返します。

例:
@c ===beg===
@c load (graphs)$
@c p : petersen_graph()$
@c graph_charpoly(p, x), factor;
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : petersen_graph()$
(%i3) graph_charpoly(p, x), factor;
                                   5        4
(%o3)               (x - 3) (x - 1)  (x + 2)
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} graph_center (@var{gr})
グラフ @var{gr}の中心を返します。

例:
@c ===beg===
@c load (graphs)$
@c g : grid_graph(5,5)$
@c graph_center(g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : grid_graph(5,5)$
(%i3) graph_center(g);
(%o3)                         [12]
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} graph_eigenvalues (@var{gr})
グラフ @var{gr}の固有値を返します。
関数は
maxima @code{eigenvalue}関数と同じフォーマットで固有値を返します。

例:
@c ===beg===
@c load (graphs)$
@c p : petersen_graph()$
@c graph_eigenvalues(p);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : petersen_graph()$
(%i3) graph_eigenvalues(p);
(%o3)               [[3, - 2, 1], [1, 4, 5]]
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} graph_periphery (@var{gr})
グラフ @var{gr}の外周を返します。

例:
@c ===beg===
@c load (graphs)$
@c g : grid_graph(5,5)$
@c graph_periphery(g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : grid_graph(5,5)$
(%i3) graph_periphery(g);
(%o3)                    [24, 20, 4, 0]
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} graph_size (@var{gr})
グラフ @var{gr}の辺の数を返します。

例:
@c ===beg===
@c load (graphs)$
@c p : petersen_graph()$
@c graph_size(p);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : petersen_graph()$
(%i3) graph_size(p);
(%o3)                          15
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} graph_order (@var{gr})
グラフ @var{gr}の頂点の数を返します。

例:
@c ===beg===
@c load (graphs)$
@c p : petersen_graph()$
@c graph_order(p);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : petersen_graph()$
(%i3) graph_order(p);
(%o3)                          10
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} girth (@var{gr})
@var{gr}の最短閉路の長さを返します。

例:
@c ===beg===
@c load (graphs)$
@c g : heawood_graph()$
@c girth(g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : heawood_graph()$
(%i3) girth(g);
(%o3)                           6
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} hamilton_cycle (@var{gr})
グラフ @var{gr}のHamilton閉路を返します。
もし @var{gr}がハミルトニアンでないなら、空のリストを返します。

例:
@c ===beg===
@c load (graphs)$
@c c : cube_graph(3)$
@c hc : hamilton_cycle(c);
@c draw_graph(c, show_edges=vertices_to_cycle(hc))$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) c : cube_graph(3)$
(%i3) hc : hamilton_cycle(c);
(%o3)              [7, 3, 2, 6, 4, 0, 1, 5, 7]
(%i4) draw_graph(c, show_edges=vertices_to_cycle(hc))$
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@ifhtml
@image{@value{figuresfolder}/graphs03,6cm}
@end ifhtml

@deffn {関数} hamilton_path (@var{gr})
グラフ @var{gr}のHamilton経路を返します。
もし @var{gr}がHamilton経路を持たないなら、空のリストを返します。

例:
@c ===beg===
@c load (graphs)$
@c p : petersen_graph()$
@c hp : hamilton_path(p);
@c draw_graph(p, show_edges=vertices_to_path(hp))$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : petersen_graph()$
(%i3) hp : hamilton_path(p);
(%o3)            [0, 5, 7, 2, 1, 6, 8, 3, 4, 9]
(%i4) draw_graph(p, show_edges=vertices_to_path(hp))$
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@ifhtml
@image{@value{figuresfolder}/graphs04,6cm}
@end ifhtml

@deffn {関数} isomorphism (@var{gr1}, @var{gr2})

グラフ/有向グラフ @var{gr1}と @var{gr2}の間の同型写像を返します。
もし @var{gr1}と @var{gr2}が同型でないなら、空のリストを返します。

例:
@c ===beg===
@c load (graphs)$
@c clk5:complement_graph(line_graph(complete_graph(5)))$
@c isomorphism(clk5, petersen_graph());
@c ===end===
@example
(%i1) load (graphs)$
(%i2) clk5:complement_graph(line_graph(complete_graph(5)))$
(%i3) isomorphism(clk5, petersen_graph());
(%o3) [9 -> 0, 2 -> 1, 6 -> 2, 5 -> 3, 0 -> 4, 1 -> 5, 3 -> 6, 
                                          4 -> 7, 7 -> 8, 8 -> 9]
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} in_neighbors (@var{v}, @var{gr})
有向グラフ @var{gr}の頂点 @var{v}の内隣接点のリストを返します。

例:
@c ===beg===
@c load (graphs)$
@c p : path_digraph(3)$
@c in_neighbors(2, p);
@c out_neighbors(2, p);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : path_digraph(3)$
(%i3) in_neighbors(2, p);
(%o3)                          [1]
(%i4) out_neighbors(2, p);
(%o4)                          []
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} is_biconnected (@var{gr})
もし @var{gr}が2連結なら @code{true}を、
そうでないなら、 @code{false}を返します。

例:
@c ===beg===
@c load (graphs)$
@c is_biconnected(cycle_graph(5));
@c is_biconnected(path_graph(5));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) is_biconnected(cycle_graph(5));
(%o2)                         true
(%i3) is_biconnected(path_graph(5));
(%o3)                         false
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} is_bipartite (@var{gr})
もし @var{gr}が2部(2彩色)なら @code{true}を、
そうでないなら、 @code{false}を返します。

例:
@c ===beg===
@c load (graphs)$
@c is_bipartite(petersen_graph());
@c is_bipartite(heawood_graph());
@c ===end===
@example
(%i1) load (graphs)$
(%i2) is_bipartite(petersen_graph());
(%o2)                         false
(%i3) is_bipartite(heawood_graph());
(%o3)                         true
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} is_connected (@var{gr})
もしグラフ @var{gr}が連結なら @code{true}を、
そうでないなら @code{false}を返します。

例:
@c ===beg===
@c load (graphs)$
@c is_connected(graph_union(cycle_graph(4), path_graph(3)));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) is_connected(graph_union(cycle_graph(4), path_graph(3)));
(%o2)                         false
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} is_digraph (@var{gr})
もし @var{gr}が有向グラフなら @code{true}を、
そうでないなら @code{false}を返します。

例:
@c ===beg===
@c load (graphs)$
@c is_digraph(path_graph(5));
@c is_digraph(path_digraph(5));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) is_digraph(path_graph(5));
(%o2)                         false
(%i3) is_digraph(path_digraph(5));
(%o3)                         true
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} is_edge_in_graph (@var{e}, @var{gr})
もし @var{e}が(有向)グラフ @var{g}の辺(弧)なら @code{true}を、
そうでないなら @code{false}を返します。

例:
@c ===beg===
@c load (graphs)$
@c c4 : cycle_graph(4)$
@c is_edge_in_graph([2,3], c4);
@c is_edge_in_graph([3,2], c4);
@c is_edge_in_graph([2,4], c4);
@c is_edge_in_graph([3,2], cycle_digraph(4));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) c4 : cycle_graph(4)$
(%i3) is_edge_in_graph([2,3], c4);
(%o3)                         true
(%i4) is_edge_in_graph([3,2], c4);
(%o4)                         true
(%i5) is_edge_in_graph([2,4], c4);
(%o5)                         false
(%i6) is_edge_in_graph([3,2], cycle_digraph(4));
(%o6)                         false
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} is_graph (@var{gr})
もし @var{gr}がグラフなら @code{true}を、
そうでないなら @code{false}を返します。

例:
@c ===beg===
@c load (graphs)$
@c is_graph(path_graph(5));
@c is_graph(path_digraph(5));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) is_graph(path_graph(5));
(%o2)                         true
(%i3) is_graph(path_digraph(5));
(%o3)                         false
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} is_graph_or_digraph (@var{gr})
もし @var{gr}がグラフか有向グラフなら @code{true}を、
そうでないなら @code{false}を返します。

例:
@c ===beg===
@c load (graphs)$
@c is_graph_or_digraph(path_graph(5));
@c is_graph_or_digraph(path_digraph(5));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) is_graph_or_digraph(path_graph(5));
(%o2)                         true
(%i3) is_graph_or_digraph(path_digraph(5));
(%o3)                         true
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} is_isomorphic (@var{gr1}, @var{gr2})

もし グラフ/有向グラフ @var{gr1}と @var{gr2}が同型なら @code{true}を、
そうでないなら @code{false}を返します。

@code{isomorphism}も参照してください。

例:
@c ===beg===
@c load (graphs)$
@c clk5:complement_graph(line_graph(complete_graph(5)))$
@c is_isomorphic(clk5, petersen_graph());
@c ===end===
@example
(%i1) load (graphs)$
(%i2) clk5:complement_graph(line_graph(complete_graph(5)))$
(%i3) is_isomorphic(clk5, petersen_graph());
(%o3)                         true
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} is_planar (@var{gr})

もし @var{gr}が平面グラフなら @code{true}を、
そうでないなら @code{false}を返します。

使われているアルゴリズムはDemoucronのアルゴリズムです。
これは二次時間アルゴリズムです。

例:
@c ===beg===
@c load (graphs)$
@c is_planar(dodecahedron_graph());
@c is_planar(petersen_graph());
@c is_planar(petersen_graph(10,2));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) is_planar(dodecahedron_graph());
(%o2)                         true
(%i3) is_planar(petersen_graph());
(%o3)                         false
(%i4) is_planar(petersen_graph(10,2));
(%o4)                         true
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} is_sconnected (@var{gr})
もし有向グラフ @var{gr}が強連結なら @code{true}を、
そうでないなら @code{false}を返します。

例:
@c ===beg===
@c load (graphs)$
@c is_sconnected(cycle_digraph(5));
@c is_sconnected(path_digraph(5));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) is_sconnected(cycle_digraph(5));
(%o2)                         true
(%i3) is_sconnected(path_digraph(5));
(%o3)                         false
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} is_vertex_in_graph (@var{v}, @var{gr})
もし @var{v}がグラフ @var{g}の頂点なら @code{true}を、
そうでないなら @code{false}を返します。

例:
@c ===beg===
@c load (graphs)$
@c c4 : cycle_graph(4)$
@c is_vertex_in_graph(0, c4);
@c is_vertex_in_graph(6, c4);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) c4 : cycle_graph(4)$
(%i3) is_vertex_in_graph(0, c4);
(%o3)                         true
(%i4) is_vertex_in_graph(6, c4);
(%o4)                         false
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} is_tree (@var{gr})
もし @var{gr}が木なら @code{true}を、
そうでないなら @code{false}を返します。

例:
@c ===beg===
@c load (graphs)$
@c is_tree(random_tree(4));
@c is_tree(graph_union(random_tree(4), random_tree(5)));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) is_tree(random_tree(4));
(%o2)                         true
(%i3) is_tree(graph_union(random_tree(4), random_tree(5)));
(%o3)                         false
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} laplacian_matrix (@var{gr})
グラフ @var{gr}のLaplace行列を返します。

例:
@c ===beg===
@c load (graphs)$
@c laplacian_matrix(cycle_graph(5));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) laplacian_matrix(cycle_graph(5));
                   [  2   - 1   0    0   - 1 ]
                   [                         ]
                   [ - 1   2   - 1   0    0  ]
                   [                         ]
(%o2)              [  0   - 1   2   - 1   0  ]
                   [                         ]
                   [  0    0   - 1   2   - 1 ]
                   [                         ]
                   [ - 1   0    0   - 1   2  ]
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} max_clique (@var{gr})
グラフ @var{gr}の最大クリークを返します。

例:
@c ===beg===
@c load (graphs)$
@c g : random_graph(100, 0.5)$
@c max_clique(g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : random_graph(100, 0.5)$
(%i3) max_clique(g);
(%o3)          [6, 12, 31, 36, 52, 59, 62, 63, 80]
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} max_degree (@var{gr})
グラフ @var{gr}の頂点の最大次数と最大次数の頂点を返します。

例:
@c ===beg===
@c load (graphs)$
@c g : random_graph(100, 0.02)$
@c max_degree(g);
@c vertex_degree(95, g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : random_graph(100, 0.02)$
(%i3) max_degree(g);
(%o3)                        [6, 79]
(%i4) vertex_degree(95, g);
(%o4)                           2
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} max_flow (@var{net}, @var{s}, @var{t})
ソース @var{s}とシンク @var{t}を持ち
ネットワーク @var{net}を通る最大フローを返します。

関数は最大フローの値と
最適フローで弧の重みを表現するリストを返します。

例:
@c ===beg===
@c load (graphs)$
@c net : create_graph(
@c   [1,2,3,4,5,6],
@c   [[[1,2], 1.0],
@c    [[1,3], 0.3],
@c    [[2,4], 0.2],
@c    [[2,5], 0.3],
@c    [[3,4], 0.1],
@c    [[3,5], 0.1],
@c    [[4,6], 1.0],
@c    [[5,6], 1.0]],
@c   directed=true)$
@c [flow_value, flow] : max_flow(net, 1, 6);
@c fl : 0$
@c for u in out_neighbors(1, net) 
@c      do fl : fl + assoc([1, u], flow)$
@c fl;
@c ===end===
@example
(%i1) load (graphs)$
(%i2) net : create_graph(
  [1,2,3,4,5,6],
  [[[1,2], 1.0],
   [[1,3], 0.3],
   [[2,4], 0.2],
   [[2,5], 0.3],
   [[3,4], 0.1],
   [[3,5], 0.1],
   [[4,6], 1.0],
   [[5,6], 1.0]],
  directed=true)$
(%i3) [flow_value, flow] : max_flow(net, 1, 6);
(%o3) [0.7, [[[1, 2], 0.5], [[1, 3], 0.2], [[2, 4], 0.2], 
[[2, 5], 0.3], [[3, 4], 0.1], [[3, 5], 0.1], [[4, 6], 0.3], 
[[5, 6], 0.4]]]
(%i4) fl : 0$
(%i5) for u in out_neighbors(1, net)
     do fl : fl + assoc([1, u], flow)$
(%i6) fl;
(%o6)                          0.7
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} max_independent_set (@var{gr})
グラフ @var{gr}の最大独立集合を返します。

例:
@c ===beg===
@c load (graphs)$
@c d : dodecahedron_graph()$
@c mi : max_independent_set(d);
@c draw_graph(d, show_vertices=mi)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) d : dodecahedron_graph()$
(%i3) mi : max_independent_set(d);
(%o3)             [0, 3, 5, 9, 10, 11, 18, 19]
(%i4) draw_graph(d, show_vertices=mi)$
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@ifhtml
@image{@value{figuresfolder}/graphs05,6cm}
@end ifhtml

@deffn {関数} max_matching (@var{gr})
グラフ @var{gr}の最大マッチングを返します。

例:
@c ===beg===
@c load (graphs)$
@c d : dodecahedron_graph()$
@c m : max_matching(d);
@c draw_graph(d, show_edges=m)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) d : dodecahedron_graph()$
(%i3) m : max_matching(d);
(%o3) [[5, 7], [8, 9], [6, 10], [14, 19], [13, 18], [12, 17], 
                               [11, 16], [0, 15], [3, 4], [1, 2]]
(%i4) draw_graph(d, show_edges=m)$
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@ifhtml
@image{@value{figuresfolder}/graphs06,6cm}
@end ifhtml

@deffn {関数} min_degree (@var{gr})
グラフ @var{gr}の頂点の最小次数と最小次数の頂点を返します。

例:
@c ===beg===
@c load (graphs)$
@c g : random_graph(100, 0.1)$
@c min_degree(g);
@c vertex_degree(21, g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : random_graph(100, 0.1)$
(%i3) min_degree(g);
(%o3)                        [3, 49]
(%i4) vertex_degree(21, g);
(%o4)                           9
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} min_edge_cut (@var{gr})
グラフ @var{gr}の最小切断辺を返します。

@code{edge_connectivity}も参照してください。

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} min_vertex_cover (@var{gr})
グラフ @var{gr}の最小頂点被覆を返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} min_vertex_cut (@var{gr})
Returns the minimum vertex cut in the graph
グラフ @var{gr}の最小頂点切断を返します。

@code{vertex_connectivity}も参照してください。

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} minimum_spanning_tree (@var{gr})
グラフ @var{gr}の最小全域木を返します。

例:
@c ===beg===
@c load (graphs)$
@c g : graph_product(path_graph(10), path_graph(10))$
@c t : minimum_spanning_tree(g)$
@c draw_graph(g, show_edges=edges(t))$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : graph_product(path_graph(10), path_graph(10))$
(%i3) t : minimum_spanning_tree(g)$
(%i4) draw_graph(g, show_edges=edges(t))$
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@ifhtml
@image{@value{figuresfolder}/graphs07,6cm}
@end ifhtml

@deffn {関数} neighbors (@var{v}, @var{gr})
グラフ @var{gr}の頂点 @var{v}の隣接点のリストを返します。

例:
@c ===beg===
@c load (graphs)$
@c p : petersen_graph()$
@c neighbors(3, p);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : petersen_graph()$
(%i3) neighbors(3, p);
(%o3)                       [4, 8, 2]
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} odd_girth (@var{gr})
グラフ @var{gr}の最短奇閉路の長さを返します。

例:
@c ===beg===
@c load (graphs)$
@c g : graph_product(cycle_graph(4), cycle_graph(7))$
@c girth(g);
@c odd_girth(g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : graph_product(cycle_graph(4), cycle_graph(7))$
(%i3) girth(g);
(%o3)                           4
(%i4) odd_girth(g);
(%o4)                           7
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} out_neighbors (@var{v}, @var{gr})
有向グラフ @var{gr}の頂点 @var{v}の外隣接点のリストを返します。

例:
@c ===beg===
@c load (graphs)$
@c p : path_digraph(3)$
@c in_neighbors(2, p);
@c out_neighbors(2, p);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : path_digraph(3)$
(%i3) in_neighbors(2, p);
(%o3)                          [1]
(%i4) out_neighbors(2, p);
(%o4)                          []
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} planar_embedding (@var{gr})

@var{gr}の平面埋め込みでのfacial walkのリストを返します。
もし @var{gr}が平面グラフでないなら @code{false}を返します。

グラフ @var{gr}は2連結でなければいけません。

使われるアルゴリズムはDemoucronのアルゴリズムです。
これは二次時間アルゴリズムです。

例:
@c ===beg===
@c load (graphs)$
@c planar_embedding(grid_graph(3,3));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) planar_embedding(grid_graph(3,3));
(%o2) [[3, 6, 7, 8, 5, 2, 1, 0], [4, 3, 0, 1], [3, 4, 7, 6], 
                                      [8, 7, 4, 5], [1, 2, 5, 4]]
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} print_graph (@var{gr})
グラフ @var{gr}についてのある情報を印字します。

例:
@c ===beg===
@c load (graphs)$
@c c5 : cycle_graph(5)$
@c print_graph(c5)$
@c dc5 : cycle_digraph(5)$
@c print_graph(dc5)$
@c out_neighbors(0, dc5);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) c5 : cycle_graph(5)$
(%i3) print_graph(c5)$
Graph on 5 vertices with 5 edges.
Adjacencies:
  4 :  0  3
  3 :  4  2
  2 :  3  1
  1 :  2  0
  0 :  4  1
(%i4) dc5 : cycle_digraph(5)$
(%i5) print_graph(dc5)$
Digraph on 5 vertices with 5 arcs.
Adjacencies:
  4 :  0
  3 :  4
  2 :  3
  1 :  2
  0 :  1
(%i6) out_neighbors(0, dc5);
(%o6)                          [1]
@end example

@opencatbox
@category{Package graphs}
@closecatbox
@end deffn

@deffn {関数} radius (@var{gr})
グラフ @var{gr}の半径を返します。

例:
@c ===beg===
@c load (graphs)$
@c radius(dodecahedron_graph());
@c ===end===
@example
(%i1) load (graphs)$
(%i2) radius(dodecahedron_graph());
(%o2)                           5
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} set_edge_weight (@var{e}, @var{w}, @var{gr})
グラフ @var{gr}の辺 @var{e}に重み @var{w}を割り当てます。

例:
@c ===beg===
@c load (graphs)$
@c g : create_graph([1, 2], [[[1,2], 1.2]])$
@c get_edge_weight([1,2], g);
@c set_edge_weight([1,2], 2.1, g);
@c get_edge_weight([1,2], g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : create_graph([1, 2], [[[1,2], 1.2]])$
(%i3) get_edge_weight([1,2], g);
(%o3)                          1.2
(%i4) set_edge_weight([1,2], 2.1, g);
(%o4)                         done
(%i5) get_edge_weight([1,2], g);
(%o5)                          2.1
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} set_vertex_label (@var{v}, @var{l}, @var{gr})
グラフ @var{gr}の頂点 @var{v}にラベル @var{l}を割り当てます。


例:
@c ===beg===
@c load (graphs)$
@c g : create_graph([[1, "One"], [2, "Two"]], [[1,2]])$
@c get_vertex_label(1, g);
@c set_vertex_label(1, "oNE", g);
@c get_vertex_label(1, g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : create_graph([[1, "One"], [2, "Two"]], [[1,2]])$
(%i3) get_vertex_label(1, g);
(%o3)                          One
(%i4) set_vertex_label(1, "oNE", g);
(%o4)                         done
(%i5) get_vertex_label(1, g);
(%o5)                          oNE
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} shortest_path (@var{u}, @var{v}, @var{gr})
グラフ @var{gr}の @var{u}から @var{v}までの最短経路を返します。

例:
@c ===beg===
@c load (graphs)$
@c d : dodecahedron_graph()$
@c path : shortest_path(0, 7, d);
@c draw_graph(d, show_edges=vertices_to_path(path))$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) d : dodecahedron_graph()$
(%i3) path : shortest_path(0, 7, d);
(%o3)                   [0, 1, 19, 13, 7]
(%i4) draw_graph(d, show_edges=vertices_to_path(path))$
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@ifhtml
@image{@value{figuresfolder}/graphs08,6cm}
@end ifhtml

@deffn {関数} shortest_weighted_path (@var{u}, @var{v}, @var{gr})
グラフ @var{gr}の @var{u}から @var{v}までの最短重み付き経路とその長さを返します。

重み付き経路の長さは経路内の辺の辺重みの和です。
もし辺に重みがないなら、辺はデフォルト重み1を持ちます。

例:

@c ===beg===
@c load (graphs)$
@c g: petersen_graph(20, 2)$
@c for e in edges(g) do set_edge_weight(e, random(1.0), g)$
@c shortest_weighted_path(0, 10, g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g: petersen_graph(20, 2)$
(%i3) for e in edges(g) do set_edge_weight(e, random(1.0), g)$
(%i4) shortest_weighted_path(0, 10, g);
(%o4) [2.575143920268482, [0, 20, 38, 36, 34, 32, 30, 10]]
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} strong_components (@var{gr})
有向グラフ @var{gr}の強成分を返します。

例:
@c ===beg===
@c load (graphs)$
@c t : random_tournament(4)$
@c strong_components(t);
@c vertex_out_degree(3, t);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) t : random_tournament(4)$
(%i3) strong_components(t);
(%o3)                 [[1], [0], [2], [3]]
(%i4) vertex_out_degree(3, t);
(%o4)                           3
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} topological_sort (@var{dag})

Returns a topological sorting of the vertices of a directed graph
有向グラフ @var{dag}の頂点のトポロジカルソートを返します。
もし @var{dag}が有向無閉路グラフなら空のリストを返します。

例:
@c ===beg===
@c load (graphs)$
@c g:create_graph(
@c          [1,2,3,4,5],
@c          [
@c           [1,2], [2,5], [5,3],
@c           [5,4], [3,4], [1,3]
@c          ],
@c          directed=true)$
@c topological_sort(g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g:create_graph(
         [1,2,3,4,5],
         [
          [1,2], [2,5], [5,3],
          [5,4], [3,4], [1,3]
         ],
         directed=true)$
(%i3) topological_sort(g);
(%o3)                    [1, 2, 5, 3, 4]
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} vertex_connectivity (@var{g})
グラフ @var{g}の頂点連結性を返します。

@code{min_vertex_cut}も参照してください。

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} vertex_degree (@var{v}, @var{gr})
グラフ @var{gr}の頂点 @var{v}の次数を返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} vertex_distance (@var{u}, @var{v}, @var{gr})
(有向)グラフ @var{gr}の @var{u}と @var{v}の間の最短経路の長さを返します。

例:
@c ===beg===
@c load (graphs)$
@c d : dodecahedron_graph()$
@c vertex_distance(0, 7, d);
@c shortest_path(0, 7, d);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) d : dodecahedron_graph()$
(%i3) vertex_distance(0, 7, d);
(%o3)                           4
(%i4) shortest_path(0, 7, d);
(%o4)                   [0, 1, 19, 13, 7]
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} vertex_eccentricity (@var{v}, @var{gr})

グラフ @var{gr}の頂点 @var{v}の離心率を返します。

例:
@c ===beg===
@c load (graphs)$
@c g:cycle_graph(7)$
@c vertex_eccentricity(0, g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g:cycle_graph(7)$
(%i3) vertex_eccentricity(0, g);
(%o3)                           3
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} vertex_in_degree (@var{v}, @var{gr})
有向グラフ @var{gr}の頂点 @var{v}の内次数を返します。

例:
@c ===beg===
@c load (graphs)$
@c p5 : path_digraph(5)$
@c print_graph(p5)$
@c vertex_in_degree(4, p5);
@c in_neighbors(4, p5);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p5 : path_digraph(5)$
(%i3) print_graph(p5)$
Digraph on 5 vertices with 4 arcs.
Adjacencies:
  4 :
  3 :  4
  2 :  3
  1 :  2
  0 :  1
(%i4) vertex_in_degree(4, p5);
(%o4)                           1
(%i5) in_neighbors(4, p5);
(%o5)                          [3]
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} vertex_out_degree (@var{v}, @var{gr})
有向グラフ @var{gr}の頂点 @var{v}の外次数を返します。

例:
@c ===beg===
@c load (graphs)$
@c t : random_tournament(10)$
@c vertex_out_degree(0, t);
@c out_neighbors(0, t);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) t : random_tournament(10)$
(%i3) vertex_out_degree(0, t);
(%o3)                           2
(%i4) out_neighbors(0, t);
(%o4)                        [7, 1]
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} vertices (@var{gr})
グラフ @var{gr}の頂点のリストを返します。

例:
@c ===beg===
@c load (graphs)$
@c vertices(complete_graph(4));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) vertices(complete_graph(4));
(%o2)                     [3, 2, 1, 0]
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} vertex_coloring (@var{gr})
グラフ @var{gr}の頂点の最適色付けを返します。

関数は、彩色数と @var{gr}の頂点の色付けを表すリストを返します。

例:
@c ===beg===
@c load (graphs)$
@c p:petersen_graph()$
@c vertex_coloring(p);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p:petersen_graph()$
(%i3) vertex_coloring(p);
(%o3) [3, [[0, 2], [1, 3], [2, 2], [3, 3], [4, 1], [5, 3], 
                                 [6, 1], [7, 1], [8, 2], [9, 2]]]
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@deffn {関数} wiener_index (@var{gr})
グラフ @var{gr}のWiener指数を返します。

例:
@c ===beg===
@c load (graphs)$
@c wiener_index(dodecahedron_graph());
@c ===end===
@example
(%i2) wiener_index(dodecahedron_graph());
(%o2)                          500
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - properties}
@closecatbox
@end deffn

@subsection Modifying graphs

@deffn {関数} add_edge (@var{e}, @var{gr})
辺 @var{e}をグラフ @var{gr}に加えます。

例:
@c ===beg===
@c load (graphs)$
@c p : path_graph(4)$
@c neighbors(0, p);
@c add_edge([0,3], p);
@c neighbors(0, p);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : path_graph(4)$
(%i3) neighbors(0, p);
(%o3)                          [1]
(%i4) add_edge([0,3], p);
(%o4)                         done
(%i5) neighbors(0, p);
(%o5)                        [3, 1]
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - modifications}
@closecatbox
@end deffn

@deffn {関数} add_edges (@var{e_list}, @var{gr})
リスト @var{e_list}の中の辺すべてをグラフ @var{gr}に加えます。

例:
@c ===beg===
@c load (graphs)$
@c g : empty_graph(3)$
@c add_edges([[0,1],[1,2]], g)$
@c print_graph(g)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : empty_graph(3)$
(%i3) add_edges([[0,1],[1,2]], g)$
(%i4) print_graph(g)$
Graph on 3 vertices with 2 edges.
Adjacencies:
  2 :  1
  1 :  2  0
  0 :  1
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - modifications}
@closecatbox
@end deffn

@deffn {関数} add_vertex (@var{v}, @var{gr})
頂点 @var{v}をグラフ @var{gr}に加えます。

例:
@c ===beg===
@c load (graphs)$
@c g : path_graph(2)$
@c add_vertex(2, g)$
@c print_graph(g)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : path_graph(2)$
(%i3) add_vertex(2, g)$
(%i4) print_graph(g)$
Graph on 3 vertices with 1 edges.
Adjacencies:
  2 :
  1 :  0
  0 :  1
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - modifications}
@closecatbox
@end deffn

@deffn {関数} add_vertices (@var{v_list}, @var{gr})
リスト @var{v_list}の中の頂点すべてをグラフ @var{gr}に加えます。

@opencatbox
@category{Package graphs}
@category{Package graphs - modifications}
@closecatbox
@end deffn

@deffn {関数} connect_vertices (@var{v_list}, @var{u_list}, @var{gr})
グラフ @var{gr}に関して、
リスト @var{v_list}内の頂点すべてを
リスト @var{u_list}内の頂点に連結します。


@var{v_list}と @var{u_list}は1つの頂点か、頂点のリストを取り得ます。

例:
@c ===beg===
@c load (graphs)$
@c g : empty_graph(4)$
@c connect_vertices(0, [1,2,3], g)$
@c print_graph(g)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : empty_graph(4)$
(%i3) connect_vertices(0, [1,2,3], g)$
(%i4) print_graph(g)$
Graph on 4 vertices with 3 edges.
Adjacencies:
  3 :  0
  2 :  0
  1 :  0
  0 :  3  2  1
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - modifications}
@closecatbox
@end deffn

@deffn {関数} contract_edge (@var{e}, @var{gr})
グラフ @var{gr}の辺 @var{e}を縮約します。

例:
@c ===beg===
@c load (graphs)$
@c g: create_graph(
@c       8, [[0,3],[1,3],[2,3],[3,4],[4,5],[4,6],[4,7]])$
@c print_graph(g)$
@c contract_edge([3,4], g)$
@c print_graph(g)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g: create_graph(
      8, [[0,3],[1,3],[2,3],[3,4],[4,5],[4,6],[4,7]])$
(%i3) print_graph(g)$
Graph on 8 vertices with 7 edges.
Adjacencies:
  7 :  4
  6 :  4
  5 :  4
  4 :  7  6  5  3
  3 :  4  2  1  0
  2 :  3
  1 :  3
  0 :  3
(%i4) contract_edge([3,4], g)$
(%i5) print_graph(g)$
Graph on 7 vertices with 6 edges.
Adjacencies:
  7 :  3
  6 :  3
  5 :  3
  3 :  5  6  7  2  1  0
  2 :  3
  1 :  3
  0 :  3
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - modifications}
@closecatbox
@end deffn

@deffn {関数} remove_edge (@var{e}, @var{gr})
グラフ @var{gr}から辺 @var{e}を削除します。

例:
@c ===beg===
@c load (graphs)$
@c c3 : cycle_graph(3)$
@c remove_edge([0,1], c3)$
@c print_graph(c3)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) c3 : cycle_graph(3)$
(%i3) remove_edge([0,1], c3)$
(%i4) print_graph(c3)$
Graph on 3 vertices with 2 edges.
Adjacencies:
  2 :  0  1
  1 :  2
  0 :  2
@end example

@opencatbox
@category{Package graphs}
@category{Package graphs - modifications}
@closecatbox
@end deffn

@deffn {関数} remove_vertex (@var{v}, @var{gr})
グラフ @var{gr}から頂点 @var{v}を削除します。

@opencatbox
@category{Package graphs}
@closecatbox
@end deffn

@subsection Reading and writing to files

@deffn {関数} dimacs_export (@var{gr}, @var{fl})
@deffnx {関数} dimacs_export (@var{gr}, @var{fl}, @var{comment1}, ..., @var{commentn})

グラフをファイル @var{fl}にDIMACSフォーマットでエクスポートします。
オプションのコメントはファイルの頭に加えられます。

@opencatbox
@category{Package graphs}
@category{Package graphs - io}
@closecatbox
@end deffn

@deffn {関数} dimacs_import (@var{fl})

DIMACSフォーマットのファイル @var{fl}からグラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - io}
@closecatbox
@end deffn

@deffn {関数} graph6_decode (@var{str})

文字列 @var{str}にgraph6フォーマットで符号化されたグラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - io}
@closecatbox
@end deffn

@deffn {関数} graph6_encode (@var{gr})

グラフ @var{gr}をgraph6フォーマットに符号化した文字列を返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - io}
@closecatbox
@end deffn

@deffn {関数} graph6_export (@var{gr_list}, @var{fl})

リスト @var{gr_list}内のグラフをファイル @var{fl}に
graph6フォーマットでエクスポートします。


@opencatbox
@category{Package graphs}
@category{Package graphs - io}
@closecatbox
@end deffn

@deffn {関数} graph6_import (@var{fl})

graph6フォーマットのファイル @var{fl}からグラフのリストを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - io}
@closecatbox
@end deffn

@deffn {関数} sparse6_decode (@var{str})

文字列 @var{str}にsparse6フォーマットで符号化されたグラフを返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - io}
@closecatbox
@end deffn

@deffn {関数} sparse6_encode (@var{gr})

グラフ @var{gr}をsparse6フォーマットに符号化した文字列を返します。

@opencatbox
@category{Package graphs}
@category{Package graphs - io}
@closecatbox
@end deffn

@deffn {関数} sparse6_export (@var{gr_list}, @var{fl})

リスト @var{gr_list}内のグラフを
ファイル @var{fl}にsparse6フォーマットでエクスポートします。

@opencatbox
@category{Package graphs}
@category{Package graphs - io}
@closecatbox
@end deffn

@deffn {関数} sparse6_import (@var{fl})

sparse6フォーマットのファイル @var{fl}からグラフのリストを返します。


@opencatbox
@category{Package graphs}
@category{Package graphs - io}
@closecatbox
@end deffn

@subsection Visualization

@deffn {関数} draw_graph (@var{graph})
@deffnx {関数} draw_graph (@var{graph}, @var{option1}, ..., @var{optionk})
@code{draw}パッケージを使ってグラフを描画します。

頂点を配置するのに使われるアルゴリズムは
オプション引数 @var{program}で指定されます。
デフォルト値は @code{program=spring_embedding}です。
@var{draw_graph}は
頂点を配置するのにgraphvizプログラムも使うことができますが、
graphvizを別途インストールしなければいけません。

例 1:

@c ===beg===
@c load (graphs)$
@c g:grid_graph(10,10)$
@c m:max_matching(g)$
@c draw_graph(g,
@c    spring_embedding_depth=100,
@c    show_edges=m, edge_type=dots,
@c    vertex_size=0)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g:grid_graph(10,10)$
(%i3) m:max_matching(g)$
(%i4) draw_graph(g,
   spring_embedding_depth=100,
   show_edges=m, edge_type=dots,
   vertex_size=0)$
@end example

@ifhtml
@image{@value{figuresfolder}/graphs09,6cm}
@end ifhtml

例 2:

@c ===beg===
@c load (graphs)$
@c g:create_graph(16,
@c     [
@c      [0,1],[1,3],[2,3],[0,2],[3,4],[2,4],
@c      [5,6],[6,4],[4,7],[6,7],[7,8],[7,10],[7,11],
@c      [8,10],[11,10],[8,9],[11,12],[9,15],[12,13],
@c      [10,14],[15,14],[13,14]
@c     ])$
@c t:minimum_spanning_tree(g)$
@c draw_graph(
@c     g,
@c     show_edges=edges(t),
@c     show_edge_width=4,
@c     show_edge_color=green,
@c     vertex_type=filled_square,
@c     vertex_size=2
@c     )$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g:create_graph(16,
    [
     [0,1],[1,3],[2,3],[0,2],[3,4],[2,4],
     [5,6],[6,4],[4,7],[6,7],[7,8],[7,10],[7,11],
     [8,10],[11,10],[8,9],[11,12],[9,15],[12,13],
     [10,14],[15,14],[13,14]
    ])$
(%i3) t:minimum_spanning_tree(g)$
(%i4) draw_graph(
    g,
    show_edges=edges(t),
    show_edge_width=4,
    show_edge_color=green,
    vertex_type=filled_square,
    vertex_size=2
    )$
@end example

@ifhtml
@image{@value{figuresfolder}/graphs10,6cm}
@end ifhtml

例 3:

@c ===beg===
@c load (graphs)$
@c g:create_graph(16,
@c     [
@c      [0,1],[1,3],[2,3],[0,2],[3,4],[2,4],
@c      [5,6],[6,4],[4,7],[6,7],[7,8],[7,10],[7,11],
@c      [8,10],[11,10],[8,9],[11,12],[9,15],[12,13],
@c      [10,14],[15,14],[13,14]
@c     ])$
@c mi : max_independent_set(g)$
@c draw_graph(
@c     g,
@c     show_vertices=mi,
@c     show_vertex_type=filled_up_triangle,
@c     show_vertex_size=2,
@c     edge_color=cyan,
@c     edge_width=3,
@c     show_id=true,
@c     text_color=brown
@c     )$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g:create_graph(16,
    [
     [0,1],[1,3],[2,3],[0,2],[3,4],[2,4],
     [5,6],[6,4],[4,7],[6,7],[7,8],[7,10],[7,11],
     [8,10],[11,10],[8,9],[11,12],[9,15],[12,13],
     [10,14],[15,14],[13,14]
    ])$
(%i3) mi : max_independent_set(g)$
(%i4) draw_graph(
    g,
    show_vertices=mi,
    show_vertex_type=filled_up_triangle,
    show_vertex_size=2,
    edge_color=cyan,
    edge_width=3,
    show_id=true,
    text_color=brown
    )$
@end example

@ifhtml
@image{@value{figuresfolder}/graphs11,6cm}
@end ifhtml

例 4:

@c ===beg===
@c load (graphs)$
@c net : create_graph(
@c     [0,1,2,3,4,5],
@c     [
@c      [[0,1], 3], [[0,2], 2],
@c      [[1,3], 1], [[1,4], 3],
@c      [[2,3], 2], [[2,4], 2],
@c      [[4,5], 2], [[3,5], 2]
@c     ],
@c     directed=true
@c     )$
@c draw_graph(
@c     net,
@c     show_weight=true,
@c     vertex_size=0,
@c     show_vertices=[0,5],
@c     show_vertex_type=filled_square,
@c     head_length=0.2,
@c     head_angle=10,
@c     edge_color="dark-green",
@c     text_color=blue
@c     )$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) net : create_graph(
    [0,1,2,3,4,5],
    [
     [[0,1], 3], [[0,2], 2],
     [[1,3], 1], [[1,4], 3],
     [[2,3], 2], [[2,4], 2],
     [[4,5], 2], [[3,5], 2]
    ],
    directed=true
    )$
(%i3) draw_graph(
    net,
    show_weight=true,
    vertex_size=0,
    show_vertices=[0,5],
    show_vertex_type=filled_square,
    head_length=0.2,
    head_angle=10,
    edge_color="dark-green",
    text_color=blue
    )$
@end example

@ifhtml
@image{@value{figuresfolder}/graphs12,6cm}
@end ifhtml

例 5:

@c ===beg===
@c load(graphs)$
@c g: petersen_graph(20, 2);
@c draw_graph(g, redraw=true, program=planar_embedding);
@c ===end===
@example
(%i1) load(graphs)$
(%i2) g: petersen_graph(20, 2);
(%o2)                         GRAPH
(%i3) draw_graph(g, redraw=true, program=planar_embedding);
(%o3)                         done
@end example

@ifhtml
@image{@value{figuresfolder}/graphs14,6cm}
@end ifhtml

例 6:

@c ===beg===
@c load(graphs)$
@c t: tutte_graph();
@c draw_graph(t, redraw=true, 
@c               fixed_vertices=[1,2,3,4,5,6,7,8,9]);
@c ===end===
@example
(%i1) load(graphs)$
(%i2) t: tutte_graph();
(%o2)                         GRAPH
(%i3) draw_graph(t, redraw=true, 
                    fixed_vertices=[1,2,3,4,5,6,7,8,9]);
(%o3)                         done
@end example

@ifhtml
@image{@value{figuresfolder}/graphs15,6cm}
@end ifhtml

@opencatbox
@category{Package graphs}
@closecatbox
@end deffn

@defvr {オプション変数} draw_graph_program
デフォルト値: @var{spring_embedding}

頂点を配置するのに使われるプログラムのデフォルト値は
@code{draw_graph}プログラムです。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} show_id
デフォルト値: @var{false}

もし @var{true}なら頂点のidが表示されます。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} show_label
デフォルト値: @var{false}

もし @var{true}なら頂点のラベルが表示されます。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} label_alignment
デフォルト値: @var{center}

頂点のラベル/idをいかに整列させるか決めます。
@code{left}, @code{center}, @code{right}であり得ます。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} show_weight 
デフォルト値: @var{false}

もし @var{true}なら辺の重みを表示します。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} vertex_type
デフォルト値: @var{circle}

頂点をいかに表示するか定義します。
可能な値に関しては、
@code{draw}パッケージの @var{point_type}オプションを参照してください。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} vertex_size
頂点のサイズ。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} vertex_color 
頂点を表示するのに使う色。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} show_vertices
デフォルト値: []

選択された頂点を異なる色を使って表示。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} show_vertex_type

@var{show_vertices}で指定された頂点をいかに表示するか定義します。
可能な値については、
@code{draw}パッケージの @var{point_type}オプションを参照してください。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} show_vertex_size
@var{show_vertices}内の頂点のサイズ

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} show_vertex_color 
@var{show_vertices}リスト内の頂点を表示するのに使う色。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} vertex_partition
デフォルト値: []

グラフの頂点の分割 @code{[[v1,v2,...],...,[vk,...,vn]]}
分割内のそれぞれのリストの頂点は異なる色で描画されます。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} vertex_coloring
頂点の色付けを指定します。
色付け @var{col}は
@var{vertex_coloring}が返すようなフォーマットで指定されなければいけません。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} edge_color 
辺を表示するのに使われる色。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} edge_width
辺の幅。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} edge_type
辺をいかに表示するか定義します。
@code{draw}パッケージの@var{line_type}オプションを参照してください。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} show_edges
異なる色を使ってリスト @var{e_list}内で指定された辺を表示する。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} show_edge_color
@var{show_edges}リスト内の辺を表示するのに使う色。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} show_edge_width
@var{show_edges}内の辺の幅。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} show_edge_type
@var{show_edges}内の辺を以下に表示するかを定義します。
@code{draw}パッケージの@var{line_type}オプションを参照してください。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} edge_partition
グラフの辺の分割 @code{[[e1,e2,...],...,[ek,...,em]]}
分割内のそれぞれのリストの辺は異なる色を使って描画されます。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} edge_coloring
辺の色付け。
色付けは
関数 @var{edge_coloring}が返すようなフォーマットで指定しなければいけません。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} redraw 
デフォルト値: @var{false}

もし @code{true}なら、
たとえ位置がグラフの以前の描画から保存されていても頂点位置が再計算されます。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} head_angle
デフォルト値: 15

(有向グラフの)弧に表示される矢印の角度。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} head_length
デフォルト値: 0.1

(有向グラフの)弧に表示される矢印の長さ。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} spring_embedding_depth
デフォルト値: 50

バネ埋め込みグラフ描画アルゴリズムでの繰り返し回数

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} terminal
描画で使う端末。
(@code{draw}パッケージの @var{terminal}オプションを参照してください。)

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} file_name
端末がスクリーンでないなら、描画のファイル名。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} program
グラフの頂点を配置するのに使われるプログラムを定義します。
graphvizプログラム (dot, neato, twopi, circ, fdp)の1つ,
@var{circular}, @var{spring_embedding}, @var{planar_embedding}を取り得ます。
2連結平面グラフでは @var{planar_embedding}だけが利用可能です。
@code{program=spring_embedding}の時、
固定位置の頂点の集合が @var{fixed_vertices}オプションで指定可能です。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@defvr {draw_graphオプション} fixed_vertices
正多角形沿いに固定された位置を持つ頂点のリストを指定します。
@code{program=spring_embedding}の時、使うことができます。

@opencatbox
@category{Package graphs}
@category{Package graphs - draw_graphs options}
@closecatbox
@end defvr

@deffn {関数} vertices_to_path (@var{v_list})
頂点のリスト @var{v_list}を
@var{v_list}で定義された経路の辺のリストに変換します。

@opencatbox
@category{Package graphs}
@closecatbox
@end deffn

@deffn {関数} vertices_to_cycle (@var{v_list})
頂点のリスト @var{v_list}を
@var{v_list}で定義された閉路の辺のリストに変換します。

@opencatbox
@category{Package graphs}
@closecatbox
@end deffn
