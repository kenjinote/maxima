@menu
* Introduction to fractals::
* Definitions for IFS fractals::
* Definitions for complex fractals::
* Definitions for Koch snowflakes::
* Definitions for Peano maps::
@end menu




@node Introduction to fractals, Definitions for IFS fractals, fractals, fractals
@section Introduction to fractals


このパッケージはよく知られているフラクタルをいくつか定義します:

- ランダムIFS(反復函数系)を使って: Sierpinski三角形、木、シダ

- 複素フラクタル: MandelbrotとJulia集合

- Koch雪片集合

- Peano写像: SierpinskiとHilbert写像

著者: Jos@'e Ram@'{@dotless{i}}rez Labrador.

質問、提案、バグに関しては、
pepe DOT ramirez AAATTT uca DOT es
まで、私に気兼ねせずコンタクトしてください。

@node Definitions for IFS fractals, Definitions for complex fractals, Introduction to fractals, fractals
@section Definitions for IFS fractals

いくつかのフラクタルは、
縮小アフィン変換をランダムに繰り返し適用することで生成することができます;
Hoggar S. G., "Mathematics for computer graphics", Cambridge University
Press 1994を参照してください。

いくつかの縮小アフィン変換のリストを定義して、
繰り返しの中で変換をランダムに選択します。
変換の選択の確率は縮小比に関係しなければいけません。

変換を変えて、別のフラクタルを見つけることができます。

@deffn {関数} sierpinskiale (@var{n})

Sierpinski三角形: 3つの縮小写像; .5の縮小定数と変形;
すべての写像は同じ縮小比です。
引数@var{n}は十分大きく、10000以上でなければいけません、

例:

@example
(%i1) load(fractals)$
(%i2) n: 10000$
(%i3) plot2d([discrete,sierpinskiale(n)], [style,dots])$
@end example

@opencatbox
@category{Package fractals}
@closecatbox

@end deffn

@deffn {関数} treefale (@var{n})

すべて同じ縮小比を持つ3つの縮小写像。
引数@var{n}は十分大きく、10000以上でなければいけません、

例:

@example
(%i1) load(fractals)$
(%i2) n: 10000$
(%i3) plot2d([discrete,treefale(n)], [style,dots])$
@end example

@opencatbox
@category{Package fractals}
@closecatbox

@end deffn

@deffn {関数} fernfale (@var{n})

変換を選択する確率が縮小比に関係する、4つの縮小写像。
引数@var{n}は十分大きく、10000以上でなければいけません、

例:

@example
(%i1) load(fractals)$
(%i2) n: 10000$
(%i3) plot2d([discrete,fernfale(n)], [style,dots])$
@end example

@opencatbox
@category{Package fractals}
@closecatbox

@end deffn

@node Definitions for complex fractals, Definitions for Koch snowflakes, Definitions for IFS fractals, Top
@section Definitions for complex fractals

@deffn {関数} mandelbrot_set (@var{x}, @var{y})

Mandelbrot集合。

例:

たくさんの演算を実行しなければいけないので、このプログラムは時間がかかります;
計算時間は格子点の数にも関係します。

@example
(%i1) load(fractals)$
(%i2) plot3d (mandelbrot_set, [x, -2.5, 1], [y, -1.5, 1.5],
                [gnuplot_preamble, "set view map"],
                [gnuplot_pm3d, true],
                [grid, 150, 150])$
@end example

@opencatbox
@category{Package fractals}
@closecatbox

@end deffn




@deffn {関数} julia_set (@var{x}, @var{y})

Julia集合。

たくさんの演算を実行しなければいけないので、このプログラムは時間がかかります;
計算時間は格子点の数にも関係します。

例:

@example
(%i1) load(fractals)$
(%i2) plot3d (julia_set, [x, -2, 1], [y, -1.5, 1.5],
                [gnuplot_preamble, "set view map"],
                [gnuplot_pm3d, true],
                [grid, 150, 150])$
@end example

See also @code{julia_parameter}.

@opencatbox
@category{Package fractals}
@closecatbox

@end deffn




@defvr {オプション変数} julia_parameter
デフォルト値: @code{%i}

Juliaフラクタルの複素パラメータ。
デフォルト値は@code{%i}です;
 we  suggest the  values 
値@code{-.745+%i*.113002}, 
@code{-.39054-%i*.58679}, @code{-.15652+%i*1.03225}, @code{-.194+%i*.6557}, 
@code{.011031-%i*.67037}を提案します。

@opencatbox
@category{Package fractals}
@closecatbox

@end defvr





@deffn {関数} julia_sin (@var{x}, @var{y})

関数@code{julia_set}が変換@code{julia_parameter+z^2}を実装する一方、
関数@code{julia_sin}は@code{julia_parameter*sin(z)}を実装します。
詳細はソースコードを参照してください。

たくさんのsinを計算するので、このプログラムはゆっくり実行されます

例:

たくさんの演算を実行しなければいけないので、このプログラムは時間がかかります;
計算時間は格子点の数にも関係します。

@example
(%i1) load(fractals)$
(%i2) julia_parameter:1+.1*%i$
(%i3) plot3d (julia_sin, [x, -2, 2], [y, -3, 3], 
                [gnuplot_preamble, "set view map"],
                [gnuplot_pm3d, true],
                [grid, 150, 150])$
@end example

See also @code{julia_parameter}.

@opencatbox
@category{Package fractals}
@closecatbox

@end deffn

@node Definitions for Koch snowflakes, Definitions for Peano maps, Definitions for complex fractals, Top
@section Definitions for Koch snowflakes



@deffn {関数} snowmap (@var{ent}, @var{nn})

Koch雪片集合。
関数@code{snowmap}は、
複素平面内の初期値の閉多角形の頂点上に雪Koch写像をプロットします。
ここで多角形の向きが重要です。
引数Argument @var{nn}はKoch変換の繰り返し適用の回数です;
@var{nn}は小さく(5か6で)なければいけません。

例:

@example
(%i1) load(fractals)$
(%i2) plot2d([discrete,
              snowmap([1,exp(%i*%pi*2/3),exp(-%i*%pi*2/3),1],4)])$
(%i3) plot2d([discrete,
              snowmap([1,exp(-%i*%pi*2/3),exp(%i*%pi*2/3),1],4)])$
(%i4) plot2d([discrete, snowmap([0,1,1+%i,%i,0],4)])$
(%i5) plot2d([discrete, snowmap([0,%i,1+%i,1,0],4)])$
@end example

@opencatbox
@category{Package fractals}
@closecatbox

@end deffn

@node Definitions for Peano maps,  , Definitions for Koch snowflakes, fractals
@section Definitions for Peano maps

ある面積を覆う連続曲線。
警告: @var{n}と共に点の数は指数関数的に増加します。


@deffn {関数} hilbertmap (@var{nn})

Hilbert写像。
@var{nn}は小さく(例えば5で)なければいけません。
もし7以上ならMaximaはクラッシュするかもしれません。

例:

@example
(%i1) load(fractals)$
(%i2) plot2d([discrete,hilbertmap(6)])$
@end example

@opencatbox
@category{Package fractals}
@closecatbox

@end deffn

@deffn {関数} sierpinskimap (@var{nn})

Sierpinski写像。
@var{nn}は小さく(例えば5で)なければいけません。
もし7以上ならMaximaはクラッシュするかもしれません。

例:

@example
(%i1) load(fractals)$
(%i2) plot2d([discrete,sierpinskimap(6)])$
@end example

@opencatbox
@category{Package fractals}
@closecatbox

@end deffn

